// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FloatVector } from './float-vector.js';


export class WireSet {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):WireSet {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWireSet(bb:flatbuffers.ByteBuffer, obj?:WireSet):WireSet {
  return (obj || new WireSet()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWireSet(bb:flatbuffers.ByteBuffer, obj?:WireSet):WireSet {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new WireSet()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

ps(index: number, obj?:FloatVector):FloatVector|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new FloatVector()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) : null;
}

psLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startWireSet(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPs(builder:flatbuffers.Builder, psOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, psOffset, 0);
}

static startPsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(12, numElems, 4);
}

static endWireSet(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createWireSet(builder:flatbuffers.Builder, psOffset:flatbuffers.Offset):flatbuffers.Offset {
  WireSet.startWireSet(builder);
  WireSet.addPs(builder, psOffset);
  return WireSet.endWireSet(builder);
}
}
