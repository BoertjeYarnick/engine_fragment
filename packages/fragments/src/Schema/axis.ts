// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AxisPartClass } from './axis-part-class.js';
import { CircleCurve } from './circle-curve.js';
import { Wire } from './wire.js';
import { WireSet } from './wire-set.js';


export class Axis {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Axis {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAxis(bb:flatbuffers.ByteBuffer, obj?:Axis):Axis {
  return (obj || new Axis()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAxis(bb:flatbuffers.ByteBuffer, obj?:Axis):Axis {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Axis()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

wires(index: number, obj?:Wire):Wire|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Wire()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;
}

wiresLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

order(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

orderLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

orderArray():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

parts(index: number):AxisPartClass|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

partsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

partsArray():Int8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Int8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

wireSets(index: number, obj?:WireSet):WireSet|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new WireSet()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

wireSetsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

circleCurves(index: number, obj?:CircleCurve):CircleCurve|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new CircleCurve()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 44, this.bb!) : null;
}

circleCurvesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startAxis(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addWires(builder:flatbuffers.Builder, wiresOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, wiresOffset, 0);
}

static startWiresVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(24, numElems, 4);
}

static addOrder(builder:flatbuffers.Builder, orderOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, orderOffset, 0);
}

static createOrderVector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createOrderVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createOrderVector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startOrderVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addParts(builder:flatbuffers.Builder, partsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, partsOffset, 0);
}

static createPartsVector(builder:flatbuffers.Builder, data:AxisPartClass[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startPartsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addWireSets(builder:flatbuffers.Builder, wireSetsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, wireSetsOffset, 0);
}

static createWireSetsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startWireSetsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCircleCurves(builder:flatbuffers.Builder, circleCurvesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, circleCurvesOffset, 0);
}

static startCircleCurvesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(44, numElems, 4);
}

static endAxis(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // wires
  builder.requiredField(offset, 6) // order
  builder.requiredField(offset, 8) // parts
  builder.requiredField(offset, 10) // wire_sets
  builder.requiredField(offset, 12) // circle_curves
  return offset;
}

static createAxis(builder:flatbuffers.Builder, wiresOffset:flatbuffers.Offset, orderOffset:flatbuffers.Offset, partsOffset:flatbuffers.Offset, wireSetsOffset:flatbuffers.Offset, circleCurvesOffset:flatbuffers.Offset):flatbuffers.Offset {
  Axis.startAxis(builder);
  Axis.addWires(builder, wiresOffset);
  Axis.addOrder(builder, orderOffset);
  Axis.addParts(builder, partsOffset);
  Axis.addWireSets(builder, wireSetsOffset);
  Axis.addCircleCurves(builder, circleCurvesOffset);
  return Axis.endAxis(builder);
}
}
