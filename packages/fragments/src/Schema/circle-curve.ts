// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FloatVector } from './float-vector.js';


export class CircleCurve {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CircleCurve {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

aperture():number {
  return this.bb!.readFloat32(this.bb_pos);
}

mutate_aperture(value:number):boolean {
  this.bb!.writeFloat32(this.bb_pos + 0, value);
  return true;
}

position(obj?:FloatVector):FloatVector|null {
  return (obj || new FloatVector()).__init(this.bb_pos + 4, this.bb!);
}

radius():number {
  return this.bb!.readFloat32(this.bb_pos + 16);
}

mutate_radius(value:number):boolean {
  this.bb!.writeFloat32(this.bb_pos + 16, value);
  return true;
}

xDirection(obj?:FloatVector):FloatVector|null {
  return (obj || new FloatVector()).__init(this.bb_pos + 20, this.bb!);
}

yDirection(obj?:FloatVector):FloatVector|null {
  return (obj || new FloatVector()).__init(this.bb_pos + 32, this.bb!);
}

static sizeOf():number {
  return 44;
}

static createCircleCurve(builder:flatbuffers.Builder, aperture: number, position_x: number, position_y: number, position_z: number, radius: number, x_direction_x: number, x_direction_y: number, x_direction_z: number, y_direction_x: number, y_direction_y: number, y_direction_z: number):flatbuffers.Offset {
  builder.prep(4, 44);
  builder.prep(4, 12);
  builder.writeFloat32(y_direction_z);
  builder.writeFloat32(y_direction_y);
  builder.writeFloat32(y_direction_x);
  builder.prep(4, 12);
  builder.writeFloat32(x_direction_z);
  builder.writeFloat32(x_direction_y);
  builder.writeFloat32(x_direction_x);
  builder.writeFloat32(radius);
  builder.prep(4, 12);
  builder.writeFloat32(position_z);
  builder.writeFloat32(position_y);
  builder.writeFloat32(position_x);
  builder.writeFloat32(aperture);
  return builder.offset();
}

}
