// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class Sample {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Sample {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

item():number {
  return this.bb!.readUint32(this.bb_pos);
}

mutate_item(value:number):boolean {
  this.bb!.writeUint32(this.bb_pos + 0, value);
  return true;
}

material():number {
  return this.bb!.readUint32(this.bb_pos + 4);
}

mutate_material(value:number):boolean {
  this.bb!.writeUint32(this.bb_pos + 4, value);
  return true;
}

representation():number {
  return this.bb!.readUint32(this.bb_pos + 8);
}

mutate_representation(value:number):boolean {
  this.bb!.writeUint32(this.bb_pos + 8, value);
  return true;
}

localTransform():number {
  return this.bb!.readUint32(this.bb_pos + 12);
}

mutate_local_transform(value:number):boolean {
  this.bb!.writeUint32(this.bb_pos + 12, value);
  return true;
}

static sizeOf():number {
  return 16;
}

static createSample(builder:flatbuffers.Builder, item: number, material: number, representation: number, local_transform: number):flatbuffers.Offset {
  builder.prep(4, 16);
  builder.writeInt32(local_transform);
  builder.writeInt32(representation);
  builder.writeInt32(material);
  builder.writeInt32(item);
  return builder.offset();
}

}
