// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { GeometryLines } from './geometry-lines.js';
import { GeometrySample } from './geometry-sample.js';
import { Transform } from './transform.js';


export class Geometries {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Geometries {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGeometries(bb:flatbuffers.ByteBuffer, obj?:Geometries):Geometries {
  return (obj || new Geometries()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGeometries(bb:flatbuffers.ByteBuffer, obj?:Geometries):Geometries {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Geometries()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

samples(index: number, obj?:GeometrySample):GeometrySample|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new GeometrySample()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) : null;
}

samplesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

transforms(index: number, obj?:Transform):Transform|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Transform()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 48, this.bb!) : null;
}

transformsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

lines(index: number, obj?:GeometryLines):GeometryLines|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new GeometryLines()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

linesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startGeometries(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addSamples(builder:flatbuffers.Builder, samplesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, samplesOffset, 0);
}

static startSamplesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(12, numElems, 4);
}

static addTransforms(builder:flatbuffers.Builder, transformsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, transformsOffset, 0);
}

static startTransformsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(48, numElems, 8);
}

static addLines(builder:flatbuffers.Builder, linesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, linesOffset, 0);
}

static createLinesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLinesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endGeometries(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // samples
  builder.requiredField(offset, 6) // transforms
  builder.requiredField(offset, 8) // lines
  return offset;
}

static createGeometries(builder:flatbuffers.Builder, samplesOffset:flatbuffers.Offset, transformsOffset:flatbuffers.Offset, linesOffset:flatbuffers.Offset):flatbuffers.Offset {
  Geometries.startGeometries(builder);
  Geometries.addSamples(builder, samplesOffset);
  Geometries.addTransforms(builder, transformsOffset);
  Geometries.addLines(builder, linesOffset);
  return Geometries.endGeometries(builder);
}
}
