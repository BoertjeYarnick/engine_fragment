// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FloatVector } from './float-vector.js';


export class Wire {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Wire {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

p1(obj?:FloatVector):FloatVector|null {
  return (obj || new FloatVector()).__init(this.bb_pos, this.bb!);
}

p2(obj?:FloatVector):FloatVector|null {
  return (obj || new FloatVector()).__init(this.bb_pos + 12, this.bb!);
}

static sizeOf():number {
  return 24;
}

static createWire(builder:flatbuffers.Builder, p1_x: number, p1_y: number, p1_z: number, p2_x: number, p2_y: number, p2_z: number):flatbuffers.Offset {
  builder.prep(4, 24);
  builder.prep(4, 12);
  builder.writeFloat32(p2_z);
  builder.writeFloat32(p2_y);
  builder.writeFloat32(p2_x);
  builder.prep(4, 12);
  builder.writeFloat32(p1_z);
  builder.writeFloat32(p1_y);
  builder.writeFloat32(p1_x);
  return builder.offset();
}

}
