// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DoubleVector } from './double-vector.js';
import { FloatVector } from './float-vector.js';


export class Transform {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Transform {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

position(obj?:DoubleVector):DoubleVector|null {
  return (obj || new DoubleVector()).__init(this.bb_pos, this.bb!);
}

xDirection(obj?:FloatVector):FloatVector|null {
  return (obj || new FloatVector()).__init(this.bb_pos + 24, this.bb!);
}

yDirection(obj?:FloatVector):FloatVector|null {
  return (obj || new FloatVector()).__init(this.bb_pos + 36, this.bb!);
}

static sizeOf():number {
  return 48;
}

static createTransform(builder:flatbuffers.Builder, position_x: number, position_y: number, position_z: number, x_direction_x: number, x_direction_y: number, x_direction_z: number, y_direction_x: number, y_direction_y: number, y_direction_z: number):flatbuffers.Offset {
  builder.prep(8, 48);
  builder.prep(4, 12);
  builder.writeFloat32(y_direction_z);
  builder.writeFloat32(y_direction_y);
  builder.writeFloat32(y_direction_x);
  builder.prep(4, 12);
  builder.writeFloat32(x_direction_z);
  builder.writeFloat32(x_direction_y);
  builder.writeFloat32(x_direction_x);
  builder.prep(8, 24);
  builder.writeFloat64(position_z);
  builder.writeFloat64(position_y);
  builder.writeFloat64(position_x);
  return builder.offset();
}

}
