// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { BoundingBox } from './bounding-box.js';
import { RepresentationClass } from './representation-class.js';


export class Representation {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Representation {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

id():number {
  return this.bb!.readUint32(this.bb_pos);
}

mutate_id(value:number):boolean {
  this.bb!.writeUint32(this.bb_pos + 0, value);
  return true;
}

bbox(obj?:BoundingBox):BoundingBox|null {
  return (obj || new BoundingBox()).__init(this.bb_pos + 4, this.bb!);
}

representationClass():RepresentationClass {
  return this.bb!.readInt8(this.bb_pos + 28);
}

mutate_representation_class(value:RepresentationClass):boolean {
  this.bb!.writeInt8(this.bb_pos + 28, value);
  return true;
}

static sizeOf():number {
  return 32;
}

static createRepresentation(builder:flatbuffers.Builder, id: number, bbox_min_x: number, bbox_min_y: number, bbox_min_z: number, bbox_max_x: number, bbox_max_y: number, bbox_max_z: number, representation_class: RepresentationClass):flatbuffers.Offset {
  builder.prep(4, 32);
  builder.pad(3);
  builder.writeInt8(representation_class);
  builder.prep(4, 24);
  builder.prep(4, 12);
  builder.writeFloat32(bbox_max_z);
  builder.writeFloat32(bbox_max_y);
  builder.writeFloat32(bbox_max_x);
  builder.prep(4, 12);
  builder.writeFloat32(bbox_min_z);
  builder.writeFloat32(bbox_min_y);
  builder.writeFloat32(bbox_min_x);
  builder.writeInt32(id);
  return builder.offset();
}

}
