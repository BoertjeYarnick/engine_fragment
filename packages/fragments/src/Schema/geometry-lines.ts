// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FloatVector } from './float-vector.js';


export class GeometryLines {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GeometryLines {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGeometryLines(bb:flatbuffers.ByteBuffer, obj?:GeometryLines):GeometryLines {
  return (obj || new GeometryLines()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGeometryLines(bb:flatbuffers.ByteBuffer, obj?:GeometryLines):GeometryLines {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GeometryLines()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

points(index: number, obj?:FloatVector):FloatVector|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new FloatVector()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) : null;
}

pointsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startGeometryLines(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPoints(builder:flatbuffers.Builder, pointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, pointsOffset, 0);
}

static startPointsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(12, numElems, 4);
}

static endGeometryLines(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // points
  return offset;
}

static createGeometryLines(builder:flatbuffers.Builder, pointsOffset:flatbuffers.Offset):flatbuffers.Offset {
  GeometryLines.startGeometryLines(builder);
  GeometryLines.addPoints(builder, pointsOffset);
  return GeometryLines.endGeometryLines(builder);
}
}
