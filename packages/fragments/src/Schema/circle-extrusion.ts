// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Axis } from './axis.js';


export class CircleExtrusion {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CircleExtrusion {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCircleExtrusion(bb:flatbuffers.ByteBuffer, obj?:CircleExtrusion):CircleExtrusion {
  return (obj || new CircleExtrusion()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCircleExtrusion(bb:flatbuffers.ByteBuffer, obj?:CircleExtrusion):CircleExtrusion {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CircleExtrusion()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

radius(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

radiusLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

radiusArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

axes(index: number, obj?:Axis):Axis|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Axis()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

axesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startCircleExtrusion(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addRadius(builder:flatbuffers.Builder, radiusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, radiusOffset, 0);
}

static createRadiusVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createRadiusVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createRadiusVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startRadiusVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addAxes(builder:flatbuffers.Builder, axesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, axesOffset, 0);
}

static createAxesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAxesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endCircleExtrusion(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // radius
  builder.requiredField(offset, 6) // axes
  return offset;
}

static createCircleExtrusion(builder:flatbuffers.Builder, radiusOffset:flatbuffers.Offset, axesOffset:flatbuffers.Offset):flatbuffers.Offset {
  CircleExtrusion.startCircleExtrusion(builder);
  CircleExtrusion.addRadius(builder, radiusOffset);
  CircleExtrusion.addAxes(builder, axesOffset);
  return CircleExtrusion.endCircleExtrusion(builder);
}
}
