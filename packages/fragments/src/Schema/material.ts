// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { RenderedFaces } from './rendered-faces.js';
import { Stroke } from './stroke.js';


export class Material {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Material {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

r():number {
  return this.bb!.readUint8(this.bb_pos);
}

mutate_r(value:number):boolean {
  this.bb!.writeUint8(this.bb_pos + 0, value);
  return true;
}

g():number {
  return this.bb!.readUint8(this.bb_pos + 1);
}

mutate_g(value:number):boolean {
  this.bb!.writeUint8(this.bb_pos + 1, value);
  return true;
}

b():number {
  return this.bb!.readUint8(this.bb_pos + 2);
}

mutate_b(value:number):boolean {
  this.bb!.writeUint8(this.bb_pos + 2, value);
  return true;
}

a():number {
  return this.bb!.readUint8(this.bb_pos + 3);
}

mutate_a(value:number):boolean {
  this.bb!.writeUint8(this.bb_pos + 3, value);
  return true;
}

renderedFaces():RenderedFaces {
  return this.bb!.readInt8(this.bb_pos + 4);
}

mutate_rendered_faces(value:RenderedFaces):boolean {
  this.bb!.writeInt8(this.bb_pos + 4, value);
  return true;
}

stroke():Stroke {
  return this.bb!.readInt8(this.bb_pos + 5);
}

mutate_stroke(value:Stroke):boolean {
  this.bb!.writeInt8(this.bb_pos + 5, value);
  return true;
}

static sizeOf():number {
  return 6;
}

static createMaterial(builder:flatbuffers.Builder, r: number, g: number, b: number, a: number, rendered_faces: RenderedFaces, stroke: Stroke):flatbuffers.Offset {
  builder.prep(1, 6);
  builder.writeInt8(stroke);
  builder.writeInt8(rendered_faces);
  builder.writeInt8(a);
  builder.writeInt8(b);
  builder.writeInt8(g);
  builder.writeInt8(r);
  return builder.offset();
}

}
