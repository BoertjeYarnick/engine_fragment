import{c4 as x,c5 as E,c6 as T,c7 as W,c8 as M,c9 as D,ca as O,cm as b,bS as z,cb as _,cc as S,cd as A,ce as B}from"./index-B2CFg0Uj.js";import{R as w}from"./rendered-faces-DtNZp-Dg.js";import"./pako.esm-DwGzBETv.js";const m=new x,U=m.get(E),l=U.create();l.scene=new T(m);l.scene.setup();l.scene.three.background=null;const $=document.getElementById("container");l.renderer=new W(m,$);l.camera=new M(m);l.camera.controls.setLookAt(80,25,-52,11,-9.5,-3);m.init();const V=m.get(D);V.create(l);const j="../../src/multithreading/fragments-thread.ts",s=new O(j);l.camera.controls.addEventListener("rest",()=>s.update(!0));s.models.list.onItemSet.add(({value:e})=>{e.useCamera(l.camera.three),l.scene.three.add(e.object),s.update(!0)});const G=await fetch("/resources/frags/medium_test.frag"),N=await G.arrayBuffer(),i=await s.load(N,{modelId:"example"}),X=await i.getItemsOfCategory("IFCSPACE"),Y=(await Promise.all(X.map(e=>e.getLocalId()))).filter(e=>typeof e<"u");await i.setVisible(Y,!1);s.update(!0);let a=null,d=null;const q=async()=>{if(!a)return;const[e]=await i.getHighlight([a]);d=e??null},L=async()=>{a&&(d?(await s.highlight(d,{[i.modelId]:[a]}),d=null):await s.resetHighlight({[i.modelId]:[a]}))};let h={color:new b("gold"),renderedFaces:w.TWO,opacity:1,transparent:!1,customId:"selection"};const F=async()=>{a&&await s.highlight(h,{[i.modelId]:[a]})},C=new z;$.addEventListener("click",async e=>{C.x=e.clientX,C.y=e.clientY;const t=await s.raycast({camera:l.camera.three,mouse:C,dom:l.renderer.three.domElement}),o=[];t?(o.push(L()),a=t.localId,o.push(q(),F())):(o.push(L()),a=null),o.push(s.update(!0)),Promise.all(o)});const J=e=>{const t=`#${Math.floor(Math.random()*16777215).toString(16).padStart(6,"0")}`;return{color:new b(t),renderedFaces:w.TWO,opacity:1,transparent:!1,customId:e}};let P=(e,t)=>{};const k=async(e,t)=>{const o=[];for(const c of e){const f=await i.getItemsOfCategory(c),p=(await Promise.all(f.map(r=>r.getLocalId()))).filter(r=>r!==null);if(p.length===0)continue;let n;t?n={color:t,renderedFaces:w.TWO,opacity:1,transparent:!1,customId:c}:n=J(c),o.push(s.highlight(n,{[i.modelId]:p})),P(c,n.color),a&&p.includes(a)&&(d=n)}a&&o.push(F()),o.push(s.update(!0)),await Promise.all(o)},K=async()=>{const e=await i.getCategories();await k(e)};let v=()=>{};const Q=async()=>{await i.resetHighlight(),v(),a&&(d=null,await s.highlight(h,{[i.modelId]:[a]}))},Z=async()=>(await i.getHighlightItemIds()).filter(t=>t!==a),ee=e=>{const t=[...s.models.materials.list.values()].find(o=>o.userData.customId==="selection");t&&"color"in t?t.color=e:h={...h,color:e}};_.init();let I="#ffffff",y="#ffffff";const[g,H]=S.create(e=>{const t=async({target:n})=>{n.loading=!0,await K(),n.loading=!1},o=async()=>{await Q(),await s.update(!0)},c=({target:n})=>{const r=new b(n.color);ee(r)},f=({target:n},r)=>{const R=new b(n.color);k(r,R)};return A`
    <bim-panel id="controls-panel" active label="Materials Management" class="options-menu">
      <bim-panel-section label="Controls">
        <bim-color-input color="#ffd700" label="Highlight Color" @input=${c}></bim-color-input>
        <bim-button label="Apply Random Colors" @click=${t}></bim-button>
        <bim-button label="Reset Colors" @click=${o}></bim-button>
      </bim-panel-section>
      <bim-panel-section label="Category Colors">
        <bim-color-input color=${I} label="IfcWall" @input=${n=>f(n,["IFCWALL","IFCWALLSTANDARDCASE"])}></bim-color-input>
        <bim-color-input color=${y} label="IfcPlate" @input=${n=>f(n,["IFCPLATE"])}></bim-color-input>
      </bim-panel-section>
      <bim-panel-section label="Other">
        <bim-label style="white-space: normal;">ðŸ’¡ To better experience this section, open your browser console to see the data logs.</bim-label>
        <bim-button label="Log Colorized Ids" @click=${async()=>{const n=await Z();console.log(n)}}></bim-button>
      </bim-panel-section>
    </bim-panel>
  `},{});v=()=>{I="#ffffff",y="#ffffff",H()};P=(e,t)=>{let o=!1;e==="IFCWALL"?(I=`#${t.getHexString()}`,o=!0):e==="IFCPLATE"&&(y=`#${t.getHexString()}`,o=!0),o&&H()};document.body.append(g);const te=S.create(()=>A`
    <bim-button class="phone-menu-toggler" icon="solar:settings-bold"
      @click=${()=>{g.classList.contains("options-menu-visible")?g.classList.remove("options-menu-visible"):g.classList.add("options-menu-visible")}}>
    </bim-button>
  `);document.body.append(te);const u=new B;u.showPanel(2);document.body.append(u.dom);u.dom.style.left="0px";u.dom.style.zIndex="unset";l.renderer.onBeforeUpdate.add(()=>u.begin());l.renderer.onAfterUpdate.add(()=>u.end());
