var II=Object.defineProperty;var oI=(R,t,e)=>t in R?II(R,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):R[t]=e;var n=(R,t,e)=>(oI(R,typeof t!="symbol"?t+"":t,e),e);import{i as Mt,f as oe,a as Bt,b as Ee,E as EI,F as Ot,T as Ut,B as rI,I as ne,c as ae,d as Ce,e as ce,g as Te,h as Re,j as Fe,k as he,l as Ae,m as Oe,n as le,o as Ne,p as be,q as fe,r as de,s as Se,t as Le,u as _e,v as pe,w as Pe,x as ue,y as Ue,z as Me,A as De,C as me,D as ge,G as Ve,H as Ge,J as ye,K as Ye,L as we,M as Be,N as xe,O as He,P as ve,Q as We,R as ze,S as Xe,U as je,V as ee,W as $e,X as qe,Y as Ke,Z as ke,_ as Qe,$ as Je,a0 as Ze,a1 as ts,a2 as es,a3 as ss,a4 as is,a5 as Is,a6 as os,a7 as Es,a8 as rs,a9 as ns,aa as as,ab as Cs,ac as cs,ad as Ts,ae as Rs,af as Fs,ag as hs,ah as As,ai as Os,aj as ls,ak as Ns,al as bs,am as fs,an as ds,ao as Ss,ap as Ls,aq as _s,ar as ps,as as Ps,at as us,au as Us,av as Ms,aw as Ds,ax as ms,ay as gs,az as Vs,aA as Gs,aB as ys,aC as Ys,aD as ws,aE as Bs,aF as xs,aG as Hs,aH as vs,aI as Ws,aJ as zs,aK as Xs,aL as js,aM as $s,aN as qs,aO as Ks,aP as ks,aQ as Qs,aR as Js,aS as Zs,aT as ti,aU as ei,aV as si,aW as ii,aX as Ii,aY as oi,aZ as Ei,a_ as ri,a$ as ni,b0 as ai,b1 as Ci,b2 as ci,b3 as Ti,b4 as Ri,b5 as Fi,b6 as hi,b7 as Ai,b8 as Oi,b9 as li,ba as Ni,bb as bi,bc as fi,bd as di,be as Si,bf as Li,bg as _i,bh as pi,bi as Pi,bj as ui,bk as Ui,bl as Mi,bm as Di,bn as mi,bo as gi,bp as Vi,bq as Gi,br as nI,bs as aI,bt as CI,bu as cI,bv as TI,bw as RI,bx as FI,by as hI,bz as AI,bA as OI,bB as lI,bC as NI,bD as bI,bE as fI,bF as dI,bG as SI,bH as LI,bI as _I,bJ as pI,bK as se,bL as yi,bM as Yi,bN as wi,bO as Zt,bP as Bi,bQ as PI,bR as X,bS as uI,bT as UI,bU as MI,bV as xi,bW as Hi,bX as DI,bY as mI,bZ as gI,b_ as xt,b$ as re,c0 as Qt,c1 as VI,c2 as GI,c3 as yI,c4 as YI,c5 as wI,c6 as BI,c7 as xI,c8 as HI,c9 as vI,ca as WI,cb as zI,cc as XI,cd as vi,ce as vt,cf as jI}from"./pako.esm-9qfSKSXL.js";import{R as $I}from"./rendered-faces-DtNZp-Dg.js";const ie={950732822:"IFCURIREFERENCE",4075327185:"IFCTIME",1209108979:"IFCTEMPERATURERATEOFCHANGEMEASURE",3457685358:"IFCSOUNDPRESSURELEVELMEASURE",4157543285:"IFCSOUNDPOWERLEVELMEASURE",2798247006:"IFCPROPERTYSETDEFINITIONSET",1790229001:"IFCPOSITIVEINTEGER",525895558:"IFCNONNEGATIVELENGTHMEASURE",1774176899:"IFCLINEINDEX",1275358634:"IFCLANGUAGEID",2541165894:"IFCDURATION",3701338814:"IFCDAYINWEEKNUMBER",2195413836:"IFCDATETIME",937566702:"IFCDATE",1683019596:"IFCCARDINALPOINTREFERENCE",2314439260:"IFCBINARY",1500781891:"IFCAREADENSITYMEASURE",3683503648:"IFCARCINDEX",4065007721:"IFCYEARNUMBER",1718600412:"IFCWARPINGMOMENTMEASURE",51269191:"IFCWARPINGCONSTANTMEASURE",2593997549:"IFCVOLUMETRICFLOWRATEMEASURE",3458127941:"IFCVOLUMEMEASURE",3345633955:"IFCVAPORPERMEABILITYMEASURE",1278329552:"IFCTORQUEMEASURE",2591213694:"IFCTIMESTAMP",2726807636:"IFCTIMEMEASURE",743184107:"IFCTHERMODYNAMICTEMPERATUREMEASURE",2016195849:"IFCTHERMALTRANSMITTANCEMEASURE",857959152:"IFCTHERMALRESISTANCEMEASURE",2281867870:"IFCTHERMALEXPANSIONCOEFFICIENTMEASURE",2645777649:"IFCTHERMALCONDUCTIVITYMEASURE",232962298:"IFCTHERMALADMITTANCEMEASURE",296282323:"IFCTEXTTRANSFORMATION",603696268:"IFCTEXTFONTNAME",3490877962:"IFCTEXTDECORATION",1460886941:"IFCTEXTALIGNMENT",2801250643:"IFCTEXT",58845555:"IFCTEMPERATUREGRADIENTMEASURE",361837227:"IFCSPECULARROUGHNESS",2757832317:"IFCSPECULAREXPONENT",3477203348:"IFCSPECIFICHEATCAPACITYMEASURE",993287707:"IFCSOUNDPRESSUREMEASURE",846465480:"IFCSOUNDPOWERMEASURE",3471399674:"IFCSOLIDANGLEMEASURE",408310005:"IFCSHEARMODULUSMEASURE",2190458107:"IFCSECTIONALAREAINTEGRALMEASURE",3467162246:"IFCSECTIONMODULUSMEASURE",2766185779:"IFCSECONDINMINUTE",3211557302:"IFCROTATIONALSTIFFNESSMEASURE",1755127002:"IFCROTATIONALMASSMEASURE",2133746277:"IFCROTATIONALFREQUENCYMEASURE",200335297:"IFCREAL",96294661:"IFCRATIOMEASURE",3972513137:"IFCRADIOACTIVITYMEASURE",3665567075:"IFCPRESSUREMEASURE",2169031380:"IFCPRESENTABLETEXT",1364037233:"IFCPOWERMEASURE",1245737093:"IFCPOSITIVERATIOMEASURE",3054510233:"IFCPOSITIVEPLANEANGLEMEASURE",2815919920:"IFCPOSITIVELENGTHMEASURE",4042175685:"IFCPLANEANGLEMEASURE",2642773653:"IFCPLANARFORCEMEASURE",2260317790:"IFCPARAMETERVALUE",929793134:"IFCPHMEASURE",2395907400:"IFCNUMERICMEASURE",2095195183:"IFCNORMALISEDRATIOMEASURE",765770214:"IFCMONTHINYEARNUMBER",2615040989:"IFCMONETARYMEASURE",3114022597:"IFCMOMENTOFINERTIAMEASURE",1648970520:"IFCMOLECULARWEIGHTMEASURE",3177669450:"IFCMOISTUREDIFFUSIVITYMEASURE",1753493141:"IFCMODULUSOFSUBGRADEREACTIONMEASURE",1052454078:"IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE",2173214787:"IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE",3341486342:"IFCMODULUSOFELASTICITYMEASURE",102610177:"IFCMINUTEINHOUR",3531705166:"IFCMASSPERLENGTHMEASURE",3124614049:"IFCMASSMEASURE",4017473158:"IFCMASSFLOWRATEMEASURE",1477762836:"IFCMASSDENSITYMEASURE",2486716878:"IFCMAGNETICFLUXMEASURE",286949696:"IFCMAGNETICFLUXDENSITYMEASURE",151039812:"IFCLUMINOUSINTENSITYMEASURE",2755797622:"IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE",2095003142:"IFCLUMINOUSFLUXMEASURE",503418787:"IFCLOGICAL",3086160713:"IFCLINEARVELOCITYMEASURE",1307019551:"IFCLINEARSTIFFNESSMEASURE",2128979029:"IFCLINEARMOMENTMEASURE",191860431:"IFCLINEARFORCEMEASURE",1243674935:"IFCLENGTHMEASURE",3258342251:"IFCLABEL",2054016361:"IFCKINEMATICVISCOSITYMEASURE",3192672207:"IFCISOTHERMALMOISTURECAPACITYMEASURE",3686016028:"IFCIONCONCENTRATIONMEASURE",3809634241:"IFCINTEGERCOUNTRATEMEASURE",1939436016:"IFCINTEGER",2679005408:"IFCINDUCTANCEMEASURE",3358199106:"IFCILLUMINANCEMEASURE",983778844:"IFCIDENTIFIER",2589826445:"IFCHOURINDAY",1158859006:"IFCHEATINGVALUEMEASURE",3113092358:"IFCHEATFLUXDENSITYMEASURE",3064340077:"IFCGLOBALLYUNIQUEID",3044325142:"IFCFREQUENCYMEASURE",1361398929:"IFCFORCEMEASURE",2590844177:"IFCFONTWEIGHT",2715512545:"IFCFONTVARIANT",1102727119:"IFCFONTSTYLE",2078135608:"IFCENERGYMEASURE",2506197118:"IFCELECTRICVOLTAGEMEASURE",2951915441:"IFCELECTRICRESISTANCEMEASURE",3790457270:"IFCELECTRICCURRENTMEASURE",2093906313:"IFCELECTRICCONDUCTANCEMEASURE",3818826038:"IFCELECTRICCHARGEMEASURE",1827137117:"IFCELECTRICCAPACITANCEMEASURE",69416015:"IFCDYNAMICVISCOSITYMEASURE",524656162:"IFCDOSEEQUIVALENTMEASURE",4134073009:"IFCDIMENSIONCOUNT",1514641115:"IFCDESCRIPTIVEMEASURE",300323983:"IFCDAYLIGHTSAVINGHOUR",86635668:"IFCDAYINMONTHNUMBER",94842927:"IFCCURVATUREMEASURE",1778710042:"IFCCOUNTMEASURE",3238673880:"IFCCONTEXTDEPENDENTMEASURE",3812528620:"IFCCOMPOUNDPLANEANGLEMEASURE",2991860651:"IFCCOMPLEXNUMBER",1867003952:"IFCBOXALIGNMENT",2735952531:"IFCBOOLEAN",2650437152:"IFCAREAMEASURE",632304761:"IFCANGULARVELOCITYMEASURE",360377573:"IFCAMOUNTOFSUBSTANCEMEASURE",4182062534:"IFCACCELERATIONMEASURE",3699917729:"IFCABSORBEDDOSEMEASURE",1971632696:"IFCGEOSLICE",2680139844:"IFCGEOMODEL",24726584:"IFCELECTRICFLOWTREATMENTDEVICE",3693000487:"IFCDISTRIBUTIONBOARD",3460952963:"IFCCONVEYORSEGMENT",3999819293:"IFCCAISSONFOUNDATION",3314249567:"IFCBOREHOLE",4196446775:"IFCBEARING",325726236:"IFCALIGNMENT",3425753595:"IFCTRACKELEMENT",991950508:"IFCSIGNAL",3798194928:"IFCREINFORCEDSOIL",3290496277:"IFCRAIL",1383356374:"IFCPAVEMENT",2182337498:"IFCNAVIGATIONELEMENT",234836483:"IFCMOORINGDEVICE",2078563270:"IFCMOBILETELECOMMUNICATIONSAPPLIANCE",1638804497:"IFCLIQUIDTERMINAL",1154579445:"IFCLINEARPOSITIONINGELEMENT",2696325953:"IFCKERB",2713699986:"IFCGEOTECHNICALASSEMBLY",2142170206:"IFCELECTRICFLOWTREATMENTDEVICETYPE",3376911765:"IFCEARTHWORKSFILL",1077100507:"IFCEARTHWORKSELEMENT",3071239417:"IFCEARTHWORKSCUT",479945903:"IFCDISTRIBUTIONBOARDTYPE",3426335179:"IFCDEEPFOUNDATION",1502416096:"IFCCOURSE",2940368186:"IFCCONVEYORSEGMENTTYPE",3203706013:"IFCCAISSONFOUNDATIONTYPE",3862327254:"IFCBUILTSYSTEM",1876633798:"IFCBUILTELEMENT",963979645:"IFCBRIDGEPART",644574406:"IFCBRIDGE",3649138523:"IFCBEARINGTYPE",1662888072:"IFCALIGNMENTVERTICAL",317615605:"IFCALIGNMENTSEGMENT",1545765605:"IFCALIGNMENTHORIZONTAL",4266260250:"IFCALIGNMENTCANT",3956297820:"IFCVIBRATIONDAMPERTYPE",1530820697:"IFCVIBRATIONDAMPER",840318589:"IFCVEHICLE",1953115116:"IFCTRANSPORTATIONDEVICE",618700268:"IFCTRACKELEMENTTYPE",2281632017:"IFCTENDONCONDUITTYPE",3663046924:"IFCTENDONCONDUIT",42703149:"IFCSINESPIRAL",1894708472:"IFCSIGNALTYPE",3599934289:"IFCSIGNTYPE",33720170:"IFCSIGN",1027922057:"IFCSEVENTHORDERPOLYNOMIALSPIRAL",544395925:"IFCSEGMENTEDREFERENCECURVE",3649235739:"IFCSECONDORDERPOLYNOMIALSPIRAL",550521510:"IFCROADPART",146592293:"IFCROAD",3818125796:"IFCRELADHERESTOELEMENT",4021432810:"IFCREFERENT",1891881377:"IFCRAILWAYPART",3992365140:"IFCRAILWAY",1763565496:"IFCRAILTYPE",1946335990:"IFCPOSITIONINGELEMENT",514975943:"IFCPAVEMENTTYPE",506776471:"IFCNAVIGATIONELEMENTTYPE",710110818:"IFCMOORINGDEVICETYPE",1950438474:"IFCMOBILETELECOMMUNICATIONSAPPLIANCETYPE",976884017:"IFCMARINEPART",525669439:"IFCMARINEFACILITY",1770583370:"IFCLIQUIDTERMINALTYPE",2176059722:"IFCLINEARELEMENT",679976338:"IFCKERBTYPE",3948183225:"IFCIMPACTPROTECTIONDEVICETYPE",2568555532:"IFCIMPACTPROTECTIONDEVICE",2898700619:"IFCGRADIENTCURVE",1594536857:"IFCGEOTECHNICALSTRATUM",4230923436:"IFCGEOTECHNICALELEMENT",4228831410:"IFCFACILITYPARTCOMMON",1310830890:"IFCFACILITYPART",24185140:"IFCFACILITY",4234616927:"IFCDIRECTRIXDERIVEDREFERENCESWEPTAREASOLID",1306400036:"IFCDEEPFOUNDATIONTYPE",4189326743:"IFCCOURSETYPE",2000195564:"IFCCOSINESPIRAL",3497074424:"IFCCLOTHOID",1626504194:"IFCBUILTELEMENTTYPE",3651464721:"IFCVEHICLETYPE",1229763772:"IFCTRIANGULATEDIRREGULARNETWORK",3665877780:"IFCTRANSPORTATIONDEVICETYPE",782932809:"IFCTHIRDORDERPOLYNOMIALSPIRAL",2735484536:"IFCSPIRAL",1356537516:"IFCSECTIONEDSURFACE",1290935644:"IFCSECTIONEDSOLIDHORIZONTAL",1862484736:"IFCSECTIONEDSOLID",1441486842:"IFCRELPOSITIONS",1033248425:"IFCRELASSOCIATESPROFILEDEF",3381221214:"IFCPOLYNOMIALCURVE",2485787929:"IFCOFFSETCURVEBYDISTANCES",590820931:"IFCOFFSETCURVE",3465909080:"IFCINDEXEDPOLYGONALTEXTUREMAP",593015953:"IFCDIRECTRIXCURVESWEPTAREASOLID",4212018352:"IFCCURVESEGMENT",3425423356:"IFCAXIS2PLACEMENTLINEAR",823603102:"IFCSEGMENT",2165702409:"IFCPOINTBYDISTANCEEXPRESSION",182550632:"IFCOPENCROSSPROFILEDEF",388784114:"IFCLINEARPLACEMENT",536804194:"IFCALIGNMENTHORIZONTALSEGMENT",3752311538:"IFCALIGNMENTCANTSEGMENT",1010789467:"IFCTEXTURECOORDINATEINDICESWITHVOIDS",222769930:"IFCTEXTURECOORDINATEINDICES",2691318326:"IFCQUANTITYNUMBER",3633395639:"IFCALIGNMENTVERTICALSEGMENT",2879124712:"IFCALIGNMENTPARAMETERSEGMENT",25142252:"IFCCONTROLLER",3087945054:"IFCALARM",4288193352:"IFCACTUATOR",630975310:"IFCUNITARYCONTROLELEMENT",4086658281:"IFCSENSOR",2295281155:"IFCPROTECTIVEDEVICETRIPPINGUNIT",182646315:"IFCFLOWINSTRUMENT",1426591983:"IFCFIRESUPPRESSIONTERMINAL",819412036:"IFCFILTER",3415622556:"IFCFAN",1003880860:"IFCELECTRICTIMECONTROL",402227799:"IFCELECTRICMOTOR",264262732:"IFCELECTRICGENERATOR",3310460725:"IFCELECTRICFLOWSTORAGEDEVICE",862014818:"IFCELECTRICDISTRIBUTIONBOARD",1904799276:"IFCELECTRICAPPLIANCE",1360408905:"IFCDUCTSILENCER",3518393246:"IFCDUCTSEGMENT",342316401:"IFCDUCTFITTING",562808652:"IFCDISTRIBUTIONCIRCUIT",4074379575:"IFCDAMPER",3640358203:"IFCCOOLINGTOWER",4136498852:"IFCCOOLEDBEAM",2272882330:"IFCCONDENSER",3571504051:"IFCCOMPRESSOR",3221913625:"IFCCOMMUNICATIONSAPPLIANCE",639361253:"IFCCOIL",3902619387:"IFCCHILLER",4217484030:"IFCCABLESEGMENT",1051757585:"IFCCABLEFITTING",3758799889:"IFCCABLECARRIERSEGMENT",635142910:"IFCCABLECARRIERFITTING",2938176219:"IFCBURNER",32344328:"IFCBOILER",2906023776:"IFCBEAMSTANDARDCASE",277319702:"IFCAUDIOVISUALAPPLIANCE",2056796094:"IFCAIRTOAIRHEATRECOVERY",177149247:"IFCAIRTERMINALBOX",1634111441:"IFCAIRTERMINAL",486154966:"IFCWINDOWSTANDARDCASE",4237592921:"IFCWASTETERMINAL",4156078855:"IFCWALLELEMENTEDCASE",4207607924:"IFCVALVE",4292641817:"IFCUNITARYEQUIPMENT",3179687236:"IFCUNITARYCONTROLELEMENTTYPE",3026737570:"IFCTUBEBUNDLE",3825984169:"IFCTRANSFORMER",812556717:"IFCTANK",1162798199:"IFCSWITCHINGDEVICE",385403989:"IFCSTRUCTURALLOADCASE",1404847402:"IFCSTACKTERMINAL",1999602285:"IFCSPACEHEATER",3420628829:"IFCSOLARDEVICE",3027962421:"IFCSLABSTANDARDCASE",3127900445:"IFCSLABELEMENTEDCASE",1329646415:"IFCSHADINGDEVICE",3053780830:"IFCSANITARYTERMINAL",2572171363:"IFCREINFORCINGBARTYPE",1232101972:"IFCRATIONALBSPLINECURVEWITHKNOTS",90941305:"IFCPUMP",655969474:"IFCPROTECTIVEDEVICETRIPPINGUNITTYPE",738039164:"IFCPROTECTIVEDEVICE",1156407060:"IFCPLATESTANDARDCASE",3612865200:"IFCPIPESEGMENT",310824031:"IFCPIPEFITTING",3694346114:"IFCOUTLET",144952367:"IFCOUTERBOUNDARYCURVE",2474470126:"IFCMOTORCONNECTION",1911478936:"IFCMEMBERSTANDARDCASE",1437502449:"IFCMEDICALDEVICE",629592764:"IFCLIGHTFIXTURE",76236018:"IFCLAMP",2176052936:"IFCJUNCTIONBOX",4175244083:"IFCINTERCEPTOR",2068733104:"IFCHUMIDIFIER",3319311131:"IFCHEATEXCHANGER",2188021234:"IFCFLOWMETER",1209101575:"IFCEXTERNALSPATIALELEMENT",484807127:"IFCEVAPORATOR",3747195512:"IFCEVAPORATIVECOOLER",2814081492:"IFCENGINE",2417008758:"IFCELECTRICDISTRIBUTIONBOARDTYPE",3242481149:"IFCDOORSTANDARDCASE",3205830791:"IFCDISTRIBUTIONSYSTEM",400855858:"IFCCOMMUNICATIONSAPPLIANCETYPE",905975707:"IFCCOLUMNSTANDARDCASE",1677625105:"IFCCIVILELEMENT",3296154744:"IFCCHIMNEY",2674252688:"IFCCABLEFITTINGTYPE",2188180465:"IFCBURNERTYPE",1177604601:"IFCBUILDINGSYSTEM",39481116:"IFCBUILDINGELEMENTPARTTYPE",1136057603:"IFCBOUNDARYCURVE",2461110595:"IFCBSPLINECURVEWITHKNOTS",1532957894:"IFCAUDIOVISUALAPPLIANCETYPE",4088093105:"IFCWORKCALENDAR",4009809668:"IFCWINDOWTYPE",926996030:"IFCVOIDINGFEATURE",2391383451:"IFCVIBRATIONISOLATOR",2415094496:"IFCTENDONTYPE",3081323446:"IFCTENDONANCHORTYPE",413509423:"IFCSYSTEMFURNITUREELEMENT",3101698114:"IFCSURFACEFEATURE",3657597509:"IFCSTRUCTURALSURFACEACTION",2757150158:"IFCSTRUCTURALCURVEREACTION",1004757350:"IFCSTRUCTURALCURVEACTION",338393293:"IFCSTAIRTYPE",1072016465:"IFCSOLARDEVICETYPE",4074543187:"IFCSHADINGDEVICETYPE",2157484638:"IFCSEAMCURVE",2781568857:"IFCROOFTYPE",2310774935:"IFCREINFORCINGMESHTYPE",964333572:"IFCREINFORCINGELEMENTTYPE",683857671:"IFCRATIONALBSPLINESURFACEWITHKNOTS",1469900589:"IFCRAMPTYPE",2839578677:"IFCPOLYGONALFACESET",1158309216:"IFCPILETYPE",3079942009:"IFCOPENINGSTANDARDCASE",1114901282:"IFCMEDICALDEVICETYPE",3113134337:"IFCINTERSECTIONCURVE",3946677679:"IFCINTERCEPTORTYPE",2571569899:"IFCINDEXEDPOLYCURVE",3493046030:"IFCGEOGRAPHICELEMENT",1509553395:"IFCFURNITURE",1893162501:"IFCFOOTINGTYPE",2853485674:"IFCEXTERNALSPATIALSTRUCTUREELEMENT",4148101412:"IFCEVENT",132023988:"IFCENGINETYPE",2397081782:"IFCELEMENTASSEMBLYTYPE",2323601079:"IFCDOORTYPE",1213902940:"IFCCYLINDRICALSURFACE",1525564444:"IFCCONSTRUCTIONPRODUCTRESOURCETYPE",4105962743:"IFCCONSTRUCTIONMATERIALRESOURCETYPE",2185764099:"IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE",15328376:"IFCCOMPOSITECURVEONSURFACE",3875453745:"IFCCOMPLEXPROPERTYTEMPLATE",3893394355:"IFCCIVILELEMENTTYPE",2197970202:"IFCCHIMNEYTYPE",167062518:"IFCBSPLINESURFACEWITHKNOTS",2887950389:"IFCBSPLINESURFACE",2603310189:"IFCADVANCEDBREPWITHVOIDS",1635779807:"IFCADVANCEDBREP",2916149573:"IFCTRIANGULATEDFACESET",1935646853:"IFCTOROIDALSURFACE",2387106220:"IFCTESSELLATEDFACESET",3206491090:"IFCTASKTYPE",699246055:"IFCSURFACECURVE",4095615324:"IFCSUBCONTRACTRESOURCETYPE",603775116:"IFCSTRUCTURALSURFACEREACTION",4015995234:"IFCSPHERICALSURFACE",2481509218:"IFCSPATIALZONETYPE",463610769:"IFCSPATIALZONE",710998568:"IFCSPATIALELEMENTTYPE",1412071761:"IFCSPATIALELEMENT",3663146110:"IFCSIMPLEPROPERTYTEMPLATE",3243963512:"IFCREVOLVEDAREASOLIDTAPERED",816062949:"IFCREPARAMETRISEDCOMPOSITECURVESEGMENT",1521410863:"IFCRELSPACEBOUNDARY2NDLEVEL",3523091289:"IFCRELSPACEBOUNDARY1STLEVEL",427948657:"IFCRELINTERFERESELEMENTS",307848117:"IFCRELDEFINESBYTEMPLATE",1462361463:"IFCRELDEFINESBYOBJECT",2565941209:"IFCRELDECLARES",1027710054:"IFCRELASSIGNSTOGROUPBYFACTOR",3521284610:"IFCPROPERTYTEMPLATE",492091185:"IFCPROPERTYSETTEMPLATE",653396225:"IFCPROJECTLIBRARY",569719735:"IFCPROCEDURETYPE",3967405729:"IFCPREDEFINEDPROPERTYSET",1682466193:"IFCPCURVE",428585644:"IFCLABORRESOURCETYPE",2294589976:"IFCINDEXEDPOLYGONALFACEWITHVOIDS",178912537:"IFCINDEXEDPOLYGONALFACE",4095422895:"IFCGEOGRAPHICELEMENTTYPE",2652556860:"IFCFIXEDREFERENCESWEPTAREASOLID",2804161546:"IFCEXTRUDEDAREASOLIDTAPERED",4024345920:"IFCEVENTTYPE",2629017746:"IFCCURVEBOUNDEDSURFACE",1815067380:"IFCCREWRESOURCETYPE",3419103109:"IFCCONTEXT",2574617495:"IFCCONSTRUCTIONRESOURCETYPE",2059837836:"IFCCARTESIANPOINTLIST3D",1675464909:"IFCCARTESIANPOINTLIST2D",574549367:"IFCCARTESIANPOINTLIST",3406155212:"IFCADVANCEDFACE",3698973494:"IFCTYPERESOURCE",3736923433:"IFCTYPEPROCESS",901063453:"IFCTESSELLATEDITEM",1096409881:"IFCSWEPTDISKSOLIDPOLYGONAL",1042787934:"IFCRESOURCETIME",1608871552:"IFCRESOURCECONSTRAINTRELATIONSHIP",2943643501:"IFCRESOURCEAPPROVALRELATIONSHIP",2090586900:"IFCQUANTITYSET",1482703590:"IFCPROPERTYTEMPLATEDEFINITION",3778827333:"IFCPREDEFINEDPROPERTIES",2998442950:"IFCMIRROREDPROFILEDEF",853536259:"IFCMATERIALRELATIONSHIP",3404854881:"IFCMATERIALPROFILESETUSAGETAPERING",3079605661:"IFCMATERIALPROFILESETUSAGE",2852063980:"IFCMATERIALCONSTITUENTSET",3708119e3:"IFCMATERIALCONSTITUENT",1585845231:"IFCLAGTIME",2133299955:"IFCINDEXEDTRIANGLETEXTUREMAP",1437953363:"IFCINDEXEDTEXTUREMAP",3570813810:"IFCINDEXEDCOLOURMAP",1437805879:"IFCEXTERNALREFERENCERELATIONSHIP",297599258:"IFCEXTENDEDPROPERTIES",211053100:"IFCEVENTTIME",2713554722:"IFCCONVERSIONBASEDUNITWITHOFFSET",3285139300:"IFCCOLOURRGBLIST",1236880293:"IFCWORKTIME",1199560280:"IFCTIMEPERIOD",3611470254:"IFCTEXTUREVERTEXLIST",2771591690:"IFCTASKTIMERECURRING",1549132990:"IFCTASKTIME",2043862942:"IFCTABLECOLUMN",2934153892:"IFCSURFACEREINFORCEMENTAREA",609421318:"IFCSTRUCTURALLOADORRESULT",3478079324:"IFCSTRUCTURALLOADCONFIGURATION",1054537805:"IFCSCHEDULINGTIME",2439245199:"IFCRESOURCELEVELRELATIONSHIP",2433181523:"IFCREFERENCE",3915482550:"IFCRECURRENCEPATTERN",986844984:"IFCPROPERTYABSTRACTION",3843373140:"IFCPROJECTEDCRS",677532197:"IFCPRESENTATIONITEM",1507914824:"IFCMATERIALUSAGEDEFINITION",552965576:"IFCMATERIALPROFILEWITHOFFSETS",164193824:"IFCMATERIALPROFILESET",2235152071:"IFCMATERIALPROFILE",1847252529:"IFCMATERIALLAYERWITHOFFSETS",760658860:"IFCMATERIALDEFINITION",3057273783:"IFCMAPCONVERSION",4294318154:"IFCEXTERNALINFORMATION",1466758467:"IFCCOORDINATEREFERENCESYSTEM",1785450214:"IFCCOORDINATEOPERATION",775493141:"IFCCONNECTIONVOLUMEGEOMETRY",979691226:"IFCREINFORCINGBAR",3700593921:"IFCELECTRICDISTRIBUTIONPOINT",1062813311:"IFCDISTRIBUTIONCONTROLELEMENT",1052013943:"IFCDISTRIBUTIONCHAMBERELEMENT",578613899:"IFCCONTROLLERTYPE",2454782716:"IFCCHAMFEREDGEFEATURE",753842376:"IFCBEAM",3001207471:"IFCALARMTYPE",2874132201:"IFCACTUATORTYPE",3304561284:"IFCWINDOW",3512223829:"IFCWALLSTANDARDCASE",2391406946:"IFCWALL",3313531582:"IFCVIBRATIONISOLATORTYPE",2347447852:"IFCTENDONANCHOR",3824725483:"IFCTENDON",2515109513:"IFCSTRUCTURALANALYSISMODEL",4252922144:"IFCSTAIRFLIGHT",331165859:"IFCSTAIR",1529196076:"IFCSLAB",1783015770:"IFCSENSORTYPE",1376911519:"IFCROUNDEDEDGEFEATURE",2016517767:"IFCROOF",2320036040:"IFCREINFORCINGMESH",3027567501:"IFCREINFORCINGELEMENT",3055160366:"IFCRATIONALBEZIERCURVE",3283111854:"IFCRAMPFLIGHT",3024970846:"IFCRAMP",2262370178:"IFCRAILING",3171933400:"IFCPLATE",1687234759:"IFCPILE",1073191201:"IFCMEMBER",900683007:"IFCFOOTING",3508470533:"IFCFLOWTREATMENTDEVICE",2223149337:"IFCFLOWTERMINAL",707683696:"IFCFLOWSTORAGEDEVICE",987401354:"IFCFLOWSEGMENT",3132237377:"IFCFLOWMOVINGDEVICE",4037862832:"IFCFLOWINSTRUMENTTYPE",4278956645:"IFCFLOWFITTING",2058353004:"IFCFLOWCONTROLLER",4222183408:"IFCFIRESUPPRESSIONTERMINALTYPE",1810631287:"IFCFILTERTYPE",346874300:"IFCFANTYPE",1658829314:"IFCENERGYCONVERSIONDEVICE",857184966:"IFCELECTRICALELEMENT",1634875225:"IFCELECTRICALCIRCUIT",712377611:"IFCELECTRICTIMECONTROLTYPE",1217240411:"IFCELECTRICMOTORTYPE",1365060375:"IFCELECTRICHEATERTYPE",1534661035:"IFCELECTRICGENERATORTYPE",3277789161:"IFCELECTRICFLOWSTORAGEDEVICETYPE",663422040:"IFCELECTRICAPPLIANCETYPE",855621170:"IFCEDGEFEATURE",2030761528:"IFCDUCTSILENCERTYPE",3760055223:"IFCDUCTSEGMENTTYPE",869906466:"IFCDUCTFITTINGTYPE",395920057:"IFCDOOR",3041715199:"IFCDISTRIBUTIONPORT",3040386961:"IFCDISTRIBUTIONFLOWELEMENT",1945004755:"IFCDISTRIBUTIONELEMENT",2063403501:"IFCDISTRIBUTIONCONTROLELEMENTTYPE",1599208980:"IFCDISTRIBUTIONCHAMBERELEMENTTYPE",2635815018:"IFCDISCRETEACCESSORYTYPE",1335981549:"IFCDISCRETEACCESSORY",4147604152:"IFCDIAMETERDIMENSION",3961806047:"IFCDAMPERTYPE",3495092785:"IFCCURTAINWALL",1973544240:"IFCCOVERING",2954562838:"IFCCOOLINGTOWERTYPE",335055490:"IFCCOOLEDBEAMTYPE",488727124:"IFCCONSTRUCTIONPRODUCTRESOURCE",1060000209:"IFCCONSTRUCTIONMATERIALRESOURCE",3898045240:"IFCCONSTRUCTIONEQUIPMENTRESOURCE",1163958913:"IFCCONDITIONCRITERION",2188551683:"IFCCONDITION",2816379211:"IFCCONDENSERTYPE",3850581409:"IFCCOMPRESSORTYPE",843113511:"IFCCOLUMN",2301859152:"IFCCOILTYPE",2611217952:"IFCCIRCLE",2951183804:"IFCCHILLERTYPE",1285652485:"IFCCABLESEGMENTTYPE",3293546465:"IFCCABLECARRIERSEGMENTTYPE",395041908:"IFCCABLECARRIERFITTINGTYPE",1909888760:"IFCBUILDINGELEMENTPROXYTYPE",1095909175:"IFCBUILDINGELEMENTPROXY",2979338954:"IFCBUILDINGELEMENTPART",52481810:"IFCBUILDINGELEMENTCOMPONENT",3299480353:"IFCBUILDINGELEMENT",231477066:"IFCBOILERTYPE",1916977116:"IFCBEZIERCURVE",819618141:"IFCBEAMTYPE",1967976161:"IFCBSPLINECURVE",3460190687:"IFCASSET",2470393545:"IFCANGULARDIMENSION",1871374353:"IFCAIRTOAIRHEATRECOVERYTYPE",3352864051:"IFCAIRTERMINALTYPE",1411407467:"IFCAIRTERMINALBOXTYPE",3821786052:"IFCACTIONREQUEST",1213861670:"IFC2DCOMPOSITECURVE",1033361043:"IFCZONE",3342526732:"IFCWORKSCHEDULE",4218914973:"IFCWORKPLAN",1028945134:"IFCWORKCONTROL",1133259667:"IFCWASTETERMINALTYPE",1898987631:"IFCWALLTYPE",2769231204:"IFCVIRTUALELEMENT",728799441:"IFCVALVETYPE",1911125066:"IFCUNITARYEQUIPMENTTYPE",1600972822:"IFCTUBEBUNDLETYPE",3593883385:"IFCTRIMMEDCURVE",1620046519:"IFCTRANSPORTELEMENT",1692211062:"IFCTRANSFORMERTYPE",1637806684:"IFCTIMESERIESSCHEDULE",5716631:"IFCTANKTYPE",2254336722:"IFCSYSTEM",2315554128:"IFCSWITCHINGDEVICETYPE",148013059:"IFCSUBCONTRACTRESOURCE",1975003073:"IFCSTRUCTURALSURFACECONNECTION",2986769608:"IFCSTRUCTURALRESULTGROUP",1235345126:"IFCSTRUCTURALPOINTREACTION",734778138:"IFCSTRUCTURALPOINTCONNECTION",2082059205:"IFCSTRUCTURALPOINTACTION",3987759626:"IFCSTRUCTURALPLANARACTIONVARYING",1621171031:"IFCSTRUCTURALPLANARACTION",1252848954:"IFCSTRUCTURALLOADGROUP",1721250024:"IFCSTRUCTURALLINEARACTIONVARYING",1807405624:"IFCSTRUCTURALLINEARACTION",2445595289:"IFCSTRUCTURALCURVEMEMBERVARYING",214636428:"IFCSTRUCTURALCURVEMEMBER",4243806635:"IFCSTRUCTURALCURVECONNECTION",1179482911:"IFCSTRUCTURALCONNECTION",682877961:"IFCSTRUCTURALACTION",1039846685:"IFCSTAIRFLIGHTTYPE",3112655638:"IFCSTACKTERMINALTYPE",3812236995:"IFCSPACETYPE",652456506:"IFCSPACEPROGRAM",1305183839:"IFCSPACEHEATERTYPE",3856911033:"IFCSPACE",2533589738:"IFCSLABTYPE",4097777520:"IFCSITE",4105383287:"IFCSERVICELIFE",3517283431:"IFCSCHEDULETIMECONTROL",1768891740:"IFCSANITARYTERMINALTYPE",2863920197:"IFCRELASSIGNSTASKS",160246688:"IFCRELAGGREGATES",2324767716:"IFCRAMPFLIGHTTYPE",2893384427:"IFCRAILINGTYPE",3248260540:"IFCRADIUSDIMENSION",2250791053:"IFCPUMPTYPE",1842657554:"IFCPROTECTIVEDEVICETYPE",3651124850:"IFCPROJECTIONELEMENT",3642467123:"IFCPROJECTORDERRECORD",2904328755:"IFCPROJECTORDER",2744685151:"IFCPROCEDURE",3740093272:"IFCPORT",3724593414:"IFCPOLYLINE",4017108033:"IFCPLATETYPE",4231323485:"IFCPIPESEGMENTTYPE",804291784:"IFCPIPEFITTINGTYPE",3327091369:"IFCPERMIT",2382730787:"IFCPERFORMANCEHISTORY",2837617999:"IFCOUTLETTYPE",3425660407:"IFCORDERACTION",3588315303:"IFCOPENINGELEMENT",4143007308:"IFCOCCUPANT",1916936684:"IFCMOVE",977012517:"IFCMOTORCONNECTIONTYPE",3181161470:"IFCMEMBERTYPE",2108223431:"IFCMECHANICALFASTENERTYPE",377706215:"IFCMECHANICALFASTENER",2506943328:"IFCLINEARDIMENSION",1161773419:"IFCLIGHTFIXTURETYPE",1051575348:"IFCLAMPTYPE",3827777499:"IFCLABORRESOURCE",4288270099:"IFCJUNCTIONBOXTYPE",2391368822:"IFCINVENTORY",1806887404:"IFCHUMIDIFIERTYPE",1251058090:"IFCHEATEXCHANGERTYPE",2706460486:"IFCGROUP",3009204131:"IFCGRID",200128114:"IFCGASTERMINALTYPE",814719939:"IFCFURNITURESTANDARD",263784265:"IFCFURNISHINGELEMENT",3009222698:"IFCFLOWTREATMENTDEVICETYPE",2297155007:"IFCFLOWTERMINALTYPE",1339347760:"IFCFLOWSTORAGEDEVICETYPE",1834744321:"IFCFLOWSEGMENTTYPE",1482959167:"IFCFLOWMOVINGDEVICETYPE",3815607619:"IFCFLOWMETERTYPE",3198132628:"IFCFLOWFITTINGTYPE",3907093117:"IFCFLOWCONTROLLERTYPE",1287392070:"IFCFEATUREELEMENTSUBTRACTION",2143335405:"IFCFEATUREELEMENTADDITION",2827207264:"IFCFEATUREELEMENT",2489546625:"IFCFASTENERTYPE",647756555:"IFCFASTENER",3737207727:"IFCFACETEDBREPWITHVOIDS",807026263:"IFCFACETEDBREP",3390157468:"IFCEVAPORATORTYPE",3174744832:"IFCEVAPORATIVECOOLERTYPE",3272907226:"IFCEQUIPMENTSTANDARD",1962604670:"IFCEQUIPMENTELEMENT",2107101300:"IFCENERGYCONVERSIONDEVICETYPE",1704287377:"IFCELLIPSE",2590856083:"IFCELEMENTCOMPONENTTYPE",1623761950:"IFCELEMENTCOMPONENT",4123344466:"IFCELEMENTASSEMBLY",1758889154:"IFCELEMENT",360485395:"IFCELECTRICALBASEPROPERTIES",3849074793:"IFCDISTRIBUTIONFLOWELEMENTTYPE",3256556792:"IFCDISTRIBUTIONELEMENTTYPE",681481545:"IFCDIMENSIONCURVEDIRECTEDCALLOUT",1457835157:"IFCCURTAINWALLTYPE",3295246426:"IFCCREWRESOURCE",1916426348:"IFCCOVERINGTYPE",1419761937:"IFCCOSTSCHEDULE",3895139033:"IFCCOSTITEM",3293443760:"IFCCONTROL",2559216714:"IFCCONSTRUCTIONRESOURCE",2510884976:"IFCCONIC",3732776249:"IFCCOMPOSITECURVE",300633059:"IFCCOLUMNTYPE",2937912522:"IFCCIRCLEHOLLOWPROFILEDEF",3124254112:"IFCBUILDINGSTOREY",1950629157:"IFCBUILDINGELEMENTTYPE",4031249490:"IFCBUILDING",1260505505:"IFCBOUNDEDCURVE",3649129432:"IFCBOOLEANCLIPPINGRESULT",1334484129:"IFCBLOCK",3207858831:"IFCASYMMETRICISHAPEPROFILEDEF",1674181508:"IFCANNOTATION",2296667514:"IFCACTOR",2097647324:"IFCTRANSPORTELEMENTTYPE",3473067441:"IFCTASK",1580310250:"IFCSYSTEMFURNITUREELEMENTTYPE",4124788165:"IFCSURFACEOFREVOLUTION",2809605785:"IFCSURFACEOFLINEAREXTRUSION",2028607225:"IFCSURFACECURVESWEPTAREASOLID",4070609034:"IFCSTRUCTUREDDIMENSIONCALLOUT",2218152070:"IFCSTRUCTURALSURFACEMEMBERVARYING",3979015343:"IFCSTRUCTURALSURFACEMEMBER",3689010777:"IFCSTRUCTURALREACTION",530289379:"IFCSTRUCTURALMEMBER",3136571912:"IFCSTRUCTURALITEM",3544373492:"IFCSTRUCTURALACTIVITY",451544542:"IFCSPHERE",3893378262:"IFCSPATIALSTRUCTUREELEMENTTYPE",2706606064:"IFCSPATIALSTRUCTUREELEMENT",3626867408:"IFCRIGHTCIRCULARCYLINDER",4158566097:"IFCRIGHTCIRCULARCONE",1856042241:"IFCREVOLVEDAREASOLID",2914609552:"IFCRESOURCE",1401173127:"IFCRELVOIDSELEMENT",3451746338:"IFCRELSPACEBOUNDARY",366585022:"IFCRELSERVICESBUILDINGS",4122056220:"IFCRELSEQUENCE",1058617721:"IFCRELSCHEDULESCOSTITEMS",1245217292:"IFCRELREFERENCEDINSPATIALSTRUCTURE",750771296:"IFCRELPROJECTSELEMENT",202636808:"IFCRELOVERRIDESPROPERTIES",2051452291:"IFCRELOCCUPIESSPACES",3268803585:"IFCRELNESTS",4189434867:"IFCRELINTERACTIONREQUIREMENTS",279856033:"IFCRELFLOWCONTROLELEMENTS",3940055652:"IFCRELFILLSELEMENT",781010003:"IFCRELDEFINESBYTYPE",4186316022:"IFCRELDEFINESBYPROPERTIES",693640335:"IFCRELDEFINES",2551354335:"IFCRELDECOMPOSES",2802773753:"IFCRELCOVERSSPACES",886880790:"IFCRELCOVERSBLDGELEMENTS",3242617779:"IFCRELCONTAINEDINSPATIALSTRUCTURE",3678494232:"IFCRELCONNECTSWITHREALIZINGELEMENTS",504942748:"IFCRELCONNECTSWITHECCENTRICITY",1638771189:"IFCRELCONNECTSSTRUCTURALMEMBER",3912681535:"IFCRELCONNECTSSTRUCTURALELEMENT",2127690289:"IFCRELCONNECTSSTRUCTURALACTIVITY",3190031847:"IFCRELCONNECTSPORTS",4201705270:"IFCRELCONNECTSPORTTOELEMENT",3945020480:"IFCRELCONNECTSPATHELEMENTS",1204542856:"IFCRELCONNECTSELEMENTS",826625072:"IFCRELCONNECTS",2851387026:"IFCRELASSOCIATESPROFILEPROPERTIES",2655215786:"IFCRELASSOCIATESMATERIAL",3840914261:"IFCRELASSOCIATESLIBRARY",982818633:"IFCRELASSOCIATESDOCUMENT",2728634034:"IFCRELASSOCIATESCONSTRAINT",919958153:"IFCRELASSOCIATESCLASSIFICATION",4095574036:"IFCRELASSOCIATESAPPROVAL",1327628568:"IFCRELASSOCIATESAPPLIEDVALUE",1865459582:"IFCRELASSOCIATES",205026976:"IFCRELASSIGNSTORESOURCE",3372526763:"IFCRELASSIGNSTOPROJECTORDER",2857406711:"IFCRELASSIGNSTOPRODUCT",4278684876:"IFCRELASSIGNSTOPROCESS",1307041759:"IFCRELASSIGNSTOGROUP",2495723537:"IFCRELASSIGNSTOCONTROL",1683148259:"IFCRELASSIGNSTOACTOR",3939117080:"IFCRELASSIGNS",3454111270:"IFCRECTANGULARTRIMMEDSURFACE",2798486643:"IFCRECTANGULARPYRAMID",2770003689:"IFCRECTANGLEHOLLOWPROFILEDEF",3219374653:"IFCPROXY",1451395588:"IFCPROPERTYSET",4194566429:"IFCPROJECTIONCURVE",103090709:"IFCPROJECT",4208778838:"IFCPRODUCT",2945172077:"IFCPROCESS",220341763:"IFCPLANE",603570806:"IFCPLANARBOX",3566463478:"IFCPERMEABLECOVERINGPROPERTIES",3505215534:"IFCOFFSETCURVE3D",3388369263:"IFCOFFSETCURVE2D",3888040117:"IFCOBJECT",1425443689:"IFCMANIFOLDSOLIDBREP",1281925730:"IFCLINE",572779678:"IFCLSHAPEPROFILEDEF",1484403080:"IFCISHAPEPROFILEDEF",987898635:"IFCGEOMETRICCURVESET",1268542332:"IFCFURNITURETYPE",4238390223:"IFCFURNISHINGELEMENTTYPE",3455213021:"IFCFLUIDFLOWPROPERTIES",315944413:"IFCFILLAREASTYLETILES",4203026998:"IFCFILLAREASTYLETILESYMBOLWITHSTYLE",374418227:"IFCFILLAREASTYLEHATCHING",2047409740:"IFCFACEBASEDSURFACEMODEL",477187591:"IFCEXTRUDEDAREASOLID",80994333:"IFCENERGYPROPERTIES",2835456948:"IFCELLIPSEPROFILEDEF",2777663545:"IFCELEMENTARYSURFACE",339256511:"IFCELEMENTTYPE",1883228015:"IFCELEMENTQUANTITY",1472233963:"IFCEDGELOOP",4006246654:"IFCDRAUGHTINGPREDEFINEDCURVEFONT",445594917:"IFCDRAUGHTINGPREDEFINEDCOLOUR",3073041342:"IFCDRAUGHTINGCALLOUT",526551008:"IFCDOORSTYLE",1714330368:"IFCDOORPANELPROPERTIES",2963535650:"IFCDOORLININGPROPERTIES",32440307:"IFCDIRECTION",4054601972:"IFCDIMENSIONCURVETERMINATOR",606661476:"IFCDIMENSIONCURVE",693772133:"IFCDEFINEDSYMBOL",2827736869:"IFCCURVEBOUNDEDPLANE",2601014836:"IFCCURVE",2147822146:"IFCCSGSOLID",2506170314:"IFCCSGPRIMITIVE3D",194851669:"IFCCRANERAILFSHAPEPROFILEDEF",4133800736:"IFCCRANERAILASHAPEPROFILEDEF",2485617015:"IFCCOMPOSITECURVESEGMENT",2205249479:"IFCCLOSEDSHELL",1383045692:"IFCCIRCLEPROFILEDEF",1416205885:"IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM",3331915920:"IFCCARTESIANTRANSFORMATIONOPERATOR3D",3486308946:"IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM",3749851601:"IFCCARTESIANTRANSFORMATIONOPERATOR2D",59481748:"IFCCARTESIANTRANSFORMATIONOPERATOR",1123145078:"IFCCARTESIANPOINT",2898889636:"IFCCSHAPEPROFILEDEF",2713105998:"IFCBOXEDHALFSPACE",2581212453:"IFCBOUNDINGBOX",4182860854:"IFCBOUNDEDSURFACE",2736907675:"IFCBOOLEANRESULT",2740243338:"IFCAXIS2PLACEMENT3D",3125803723:"IFCAXIS2PLACEMENT2D",4261334040:"IFCAXIS1PLACEMENT",1302238472:"IFCANNOTATIONSURFACE",2265737646:"IFCANNOTATIONFILLAREAOCCURRENCE",669184980:"IFCANNOTATIONFILLAREA",3288037868:"IFCANNOTATIONCURVEOCCURRENCE",2543172580:"IFCZSHAPEPROFILEDEF",1299126871:"IFCWINDOWSTYLE",512836454:"IFCWINDOWPANELPROPERTIES",336235671:"IFCWINDOWLININGPROPERTIES",2759199220:"IFCVERTEXLOOP",1417489154:"IFCVECTOR",427810014:"IFCUSHAPEPROFILEDEF",2347495698:"IFCTYPEPRODUCT",1628702193:"IFCTYPEOBJECT",1345879162:"IFCTWODIRECTIONREPEATFACTOR",2715220739:"IFCTRAPEZIUMPROFILEDEF",3124975700:"IFCTEXTLITERALWITHEXTENT",4282788508:"IFCTEXTLITERAL",3028897424:"IFCTERMINATORSYMBOL",3071757647:"IFCTSHAPEPROFILEDEF",230924584:"IFCSWEPTSURFACE",1260650574:"IFCSWEPTDISKSOLID",2247615214:"IFCSWEPTAREASOLID",1878645084:"IFCSURFACESTYLERENDERING",2513912981:"IFCSURFACE",2233826070:"IFCSUBEDGE",3653947884:"IFCSTRUCTURALSTEELPROFILEPROPERTIES",3843319758:"IFCSTRUCTURALPROFILEPROPERTIES",1190533807:"IFCSTRUCTURALLOADSINGLEFORCEWARPING",1597423693:"IFCSTRUCTURALLOADSINGLEFORCE",1973038258:"IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION",2473145415:"IFCSTRUCTURALLOADSINGLEDISPLACEMENT",2668620305:"IFCSTRUCTURALLOADPLANARFORCE",1595516126:"IFCSTRUCTURALLOADLINEARFORCE",390701378:"IFCSPACETHERMALLOADPROPERTIES",1202362311:"IFCSOUNDVALUE",2485662743:"IFCSOUNDPROPERTIES",723233188:"IFCSOLIDMODEL",2609359061:"IFCSLIPPAGECONNECTIONCONDITION",4124623270:"IFCSHELLBASEDSURFACEMODEL",2411513650:"IFCSERVICELIFEFACTOR",1509187699:"IFCSECTIONEDSPINE",2778083089:"IFCROUNDEDRECTANGLEPROFILEDEF",478536968:"IFCRELATIONSHIP",3765753017:"IFCREINFORCEMENTDEFINITIONPROPERTIES",3413951693:"IFCREGULARTIMESERIES",3615266464:"IFCRECTANGLEPROFILEDEF",110355661:"IFCPROPERTYTABLEVALUE",3650150729:"IFCPROPERTYSINGLEVALUE",3357820518:"IFCPROPERTYSETDEFINITION",941946838:"IFCPROPERTYREFERENCEVALUE",2752243245:"IFCPROPERTYLISTVALUE",4166981789:"IFCPROPERTYENUMERATEDVALUE",1680319473:"IFCPROPERTYDEFINITION",871118103:"IFCPROPERTYBOUNDEDVALUE",673634403:"IFCPRODUCTDEFINITIONSHAPE",179317114:"IFCPREDEFINEDPOINTMARKERSYMBOL",433424934:"IFCPREDEFINEDDIMENSIONSYMBOL",2559016684:"IFCPREDEFINEDCURVEFONT",759155922:"IFCPREDEFINEDCOLOUR",2775532180:"IFCPOLYGONALBOUNDEDHALFSPACE",2924175390:"IFCPOLYLOOP",1423911732:"IFCPOINTONSURFACE",4022376103:"IFCPOINTONCURVE",2067069095:"IFCPOINT",1663979128:"IFCPLANAREXTENT",2004835150:"IFCPLACEMENT",597895409:"IFCPIXELTEXTURE",3021840470:"IFCPHYSICALCOMPLEXQUANTITY",2519244187:"IFCPATH",2529465313:"IFCPARAMETERIZEDPROFILEDEF",1029017970:"IFCORIENTEDEDGE",2665983363:"IFCOPENSHELL",2833995503:"IFCONEDIRECTIONREPEATFACTOR",219451334:"IFCOBJECTDEFINITION",1430189142:"IFCMECHANICALCONCRETEMATERIALPROPERTIES",2022407955:"IFCMATERIALDEFINITIONREPRESENTATION",2347385850:"IFCMAPPEDITEM",1008929658:"IFCLOOP",2624227202:"IFCLOCALPLACEMENT",3422422726:"IFCLIGHTSOURCESPOT",1520743889:"IFCLIGHTSOURCEPOSITIONAL",4266656042:"IFCLIGHTSOURCEGONIOMETRIC",2604431987:"IFCLIGHTSOURCEDIRECTIONAL",125510826:"IFCLIGHTSOURCEAMBIENT",1402838566:"IFCLIGHTSOURCE",3741457305:"IFCIRREGULARTIMESERIES",3905492369:"IFCIMAGETEXTURE",2445078500:"IFCHYGROSCOPICMATERIALPROPERTIES",812098782:"IFCHALFSPACESOLID",178086475:"IFCGRIDPLACEMENT",3590301190:"IFCGEOMETRICSET",4142052618:"IFCGEOMETRICREPRESENTATIONSUBCONTEXT",2453401579:"IFCGEOMETRICREPRESENTATIONITEM",3448662350:"IFCGEOMETRICREPRESENTATIONCONTEXT",1446786286:"IFCGENERALPROFILEPROPERTIES",803998398:"IFCGENERALMATERIALPROPERTIES",3857492461:"IFCFUELPROPERTIES",738692330:"IFCFILLAREASTYLE",4219587988:"IFCFAILURECONNECTIONCONDITION",3008276851:"IFCFACESURFACE",803316827:"IFCFACEOUTERBOUND",1809719519:"IFCFACEBOUND",2556980723:"IFCFACE",1860660968:"IFCEXTENDEDMATERIALPROPERTIES",476780140:"IFCEDGECURVE",3900360178:"IFCEDGE",4170525392:"IFCDRAUGHTINGPREDEFINEDTEXTFONT",3732053477:"IFCDOCUMENTREFERENCE",1694125774:"IFCDIMENSIONPAIR",2273265877:"IFCDIMENSIONCALLOUTRELATIONSHIP",3632507154:"IFCDERIVEDPROFILEDEF",3800577675:"IFCCURVESTYLE",2889183280:"IFCCONVERSIONBASEDUNIT",3050246964:"IFCCONTEXTDEPENDENTUNIT",45288368:"IFCCONNECTIONPOINTECCENTRICITY",1981873012:"IFCCONNECTIONCURVEGEOMETRY",370225590:"IFCCONNECTEDFACESET",1485152156:"IFCCOMPOSITEPROFILEDEF",2542286263:"IFCCOMPLEXPROPERTY",776857604:"IFCCOLOURRGB",647927063:"IFCCLASSIFICATIONREFERENCE",3150382593:"IFCCENTERLINEPROFILEDEF",616511568:"IFCBLOBTEXTURE",2705031697:"IFCARBITRARYPROFILEDEFWITHVOIDS",1310608509:"IFCARBITRARYOPENPROFILEDEF",3798115385:"IFCARBITRARYCLOSEDPROFILEDEF",2297822566:"IFCANNOTATIONTEXTOCCURRENCE",3612888222:"IFCANNOTATIONSYMBOLOCCURRENCE",962685235:"IFCANNOTATIONSURFACEOCCURRENCE",2442683028:"IFCANNOTATIONOCCURRENCE",1065908215:"IFCWATERPROPERTIES",891718957:"IFCVIRTUALGRIDINTERSECTION",1907098498:"IFCVERTEXPOINT",3304826586:"IFCVERTEXBASEDTEXTUREMAP",2799835756:"IFCVERTEX",180925521:"IFCUNITASSIGNMENT",1735638870:"IFCTOPOLOGYREPRESENTATION",1377556343:"IFCTOPOLOGICALREPRESENTATIONITEM",581633288:"IFCTIMESERIESVALUE",1718945513:"IFCTIMESERIESREFERENCERELATIONSHIP",3101149627:"IFCTIMESERIES",3317419933:"IFCTHERMALMATERIALPROPERTIES",1210645708:"IFCTEXTUREVERTEX",2552916305:"IFCTEXTUREMAP",1742049831:"IFCTEXTURECOORDINATEGENERATOR",280115917:"IFCTEXTURECOORDINATE",1484833681:"IFCTEXTSTYLEWITHBOXCHARACTERISTICS",1640371178:"IFCTEXTSTYLETEXTMODEL",2636378356:"IFCTEXTSTYLEFORDEFINEDFONT",1983826977:"IFCTEXTSTYLEFONTMODEL",1447204868:"IFCTEXTSTYLE",912023232:"IFCTELECOMADDRESS",531007025:"IFCTABLEROW",985171141:"IFCTABLE",1290481447:"IFCSYMBOLSTYLE",626085974:"IFCSURFACETEXTURE",1351298697:"IFCSURFACESTYLEWITHTEXTURES",846575682:"IFCSURFACESTYLESHADING",1607154358:"IFCSURFACESTYLEREFRACTION",3303107099:"IFCSURFACESTYLELIGHTING",1300840506:"IFCSURFACESTYLE",3049322572:"IFCSTYLEDREPRESENTATION",3958052878:"IFCSTYLEDITEM",2830218821:"IFCSTYLEMODEL",3408363356:"IFCSTRUCTURALLOADTEMPERATURE",2525727697:"IFCSTRUCTURALLOADSTATIC",2162789131:"IFCSTRUCTURALLOAD",2273995522:"IFCSTRUCTURALCONNECTIONCONDITION",3692461612:"IFCSIMPLEPROPERTY",4240577450:"IFCSHAPEREPRESENTATION",3982875396:"IFCSHAPEMODEL",867548509:"IFCSHAPEASPECT",4165799628:"IFCSECTIONREINFORCEMENTPROPERTIES",2042790032:"IFCSECTIONPROPERTIES",448429030:"IFCSIUNIT",2341007311:"IFCROOT",3679540991:"IFCRIBPLATEPROFILEPROPERTIES",1660063152:"IFCREPRESENTATIONMAP",3008791417:"IFCREPRESENTATIONITEM",3377609919:"IFCREPRESENTATIONCONTEXT",1076942058:"IFCREPRESENTATION",1222501353:"IFCRELAXATION",1580146022:"IFCREINFORCEMENTBARPROPERTIES",2692823254:"IFCREFERENCESVALUEDOCUMENT",825690147:"IFCQUANTITYWEIGHT",2405470396:"IFCQUANTITYVOLUME",3252649465:"IFCQUANTITYTIME",931644368:"IFCQUANTITYLENGTH",2093928680:"IFCQUANTITYCOUNT",2044713172:"IFCQUANTITYAREA",3710013099:"IFCPROPERTYENUMERATION",148025276:"IFCPROPERTYDEPENDENCYRELATIONSHIP",3896028662:"IFCPROPERTYCONSTRAINTRELATIONSHIP",2598011224:"IFCPROPERTY",2802850158:"IFCPROFILEPROPERTIES",3958567839:"IFCPROFILEDEF",2267347899:"IFCPRODUCTSOFCOMBUSTIONPROPERTIES",2095639259:"IFCPRODUCTREPRESENTATION",2417041796:"IFCPRESENTATIONSTYLEASSIGNMENT",3119450353:"IFCPRESENTATIONSTYLE",1304840413:"IFCPRESENTATIONLAYERWITHSTYLE",2022622350:"IFCPRESENTATIONLAYERASSIGNMENT",1775413392:"IFCPREDEFINEDTEXTFONT",3213052703:"IFCPREDEFINEDTERMINATORSYMBOL",990879717:"IFCPREDEFINEDSYMBOL",3727388367:"IFCPREDEFINEDITEM",3355820592:"IFCPOSTALADDRESS",2226359599:"IFCPHYSICALSIMPLEQUANTITY",2483315170:"IFCPHYSICALQUANTITY",101040310:"IFCPERSONANDORGANIZATION",2077209135:"IFCPERSON",1207048766:"IFCOWNERHISTORY",1411181986:"IFCORGANIZATIONRELATIONSHIP",4251960020:"IFCORGANIZATION",1227763645:"IFCOPTICALMATERIALPROPERTIES",2251480897:"IFCOBJECTIVE",3701648758:"IFCOBJECTPLACEMENT",1918398963:"IFCNAMEDUNIT",2706619895:"IFCMONETARYUNIT",3368373690:"IFCMETRIC",677618848:"IFCMECHANICALSTEELMATERIALPROPERTIES",4256014907:"IFCMECHANICALMATERIALPROPERTIES",2597039031:"IFCMEASUREWITHUNIT",3265635763:"IFCMATERIALPROPERTIES",2199411900:"IFCMATERIALLIST",1303795690:"IFCMATERIALLAYERSETUSAGE",3303938423:"IFCMATERIALLAYERSET",248100487:"IFCMATERIALLAYER",1847130766:"IFCMATERIALCLASSIFICATIONRELATIONSHIP",1838606355:"IFCMATERIAL",30780891:"IFCLOCALTIME",1566485204:"IFCLIGHTINTENSITYDISTRIBUTION",4162380809:"IFCLIGHTDISTRIBUTIONDATA",3452421091:"IFCLIBRARYREFERENCE",2655187982:"IFCLIBRARYINFORMATION",3020489413:"IFCIRREGULARTIMESERIESVALUE",852622518:"IFCGRIDAXIS",3548104201:"IFCEXTERNALLYDEFINEDTEXTFONT",3207319532:"IFCEXTERNALLYDEFINEDSYMBOL",1040185647:"IFCEXTERNALLYDEFINEDSURFACESTYLE",2242383968:"IFCEXTERNALLYDEFINEDHATCHSTYLE",3200245327:"IFCEXTERNALREFERENCE",1648886627:"IFCENVIRONMENTALIMPACTVALUE",3796139169:"IFCDRAUGHTINGCALLOUTRELATIONSHIP",770865208:"IFCDOCUMENTINFORMATIONRELATIONSHIP",1154170062:"IFCDOCUMENTINFORMATION",1376555844:"IFCDOCUMENTELECTRONICFORMAT",2949456006:"IFCDIMENSIONALEXPONENTS",1045800335:"IFCDERIVEDUNITELEMENT",1765591967:"IFCDERIVEDUNIT",1072939445:"IFCDATEANDTIME",3510044353:"IFCCURVESTYLEFONTPATTERN",2367409068:"IFCCURVESTYLEFONTANDSCALING",1105321065:"IFCCURVESTYLEFONT",539742890:"IFCCURRENCYRELATIONSHIP",602808272:"IFCCOSTVALUE",1065062679:"IFCCOORDINATEDUNIVERSALTIMEOFFSET",347226245:"IFCCONSTRAINTRELATIONSHIP",613356794:"IFCCONSTRAINTCLASSIFICATIONRELATIONSHIP",1658513725:"IFCCONSTRAINTAGGREGATIONRELATIONSHIP",1959218052:"IFCCONSTRAINT",2732653382:"IFCCONNECTIONSURFACEGEOMETRY",4257277454:"IFCCONNECTIONPORTGEOMETRY",2614616156:"IFCCONNECTIONPOINTGEOMETRY",2859738748:"IFCCONNECTIONGEOMETRY",3264961684:"IFCCOLOURSPECIFICATION",3639012971:"IFCCLASSIFICATIONNOTATIONFACET",938368621:"IFCCLASSIFICATIONNOTATION",1098599126:"IFCCLASSIFICATIONITEMRELATIONSHIP",1767535486:"IFCCLASSIFICATIONITEM",747523909:"IFCCLASSIFICATION",622194075:"IFCCALENDARDATE",2069777674:"IFCBOUNDARYNODECONDITIONWARPING",1387855156:"IFCBOUNDARYNODECONDITION",3367102660:"IFCBOUNDARYFACECONDITION",1560379544:"IFCBOUNDARYEDGECONDITION",4037036970:"IFCBOUNDARYCONDITION",3869604511:"IFCAPPROVALRELATIONSHIP",390851274:"IFCAPPROVALPROPERTYRELATIONSHIP",2080292479:"IFCAPPROVALACTORRELATIONSHIP",130549933:"IFCAPPROVAL",1110488051:"IFCAPPLIEDVALUERELATIONSHIP",411424972:"IFCAPPLIEDVALUE",639542469:"IFCAPPLICATION",618182010:"IFCADDRESS",3630933823:"IFCACTORROLE",599546466:"FILE_DESCRIPTION",1390159747:"FILE_NAME",1109904537:"FILE_SCHEMA"},Jt=2,At=4,ft=4,st=4;class zt{constructor(t){this.bytes_=t,this.position_=0,this.text_decoder_=new TextDecoder}static allocate(t){return new zt(new Uint8Array(t))}clear(){this.position_=0}bytes(){return this.bytes_}position(){return this.position_}setPosition(t){this.position_=t}capacity(){return this.bytes_.length}readInt8(t){return this.readUint8(t)<<24>>24}readUint8(t){return this.bytes_[t]}readInt16(t){return this.readUint16(t)<<16>>16}readUint16(t){return this.bytes_[t]|this.bytes_[t+1]<<8}readInt32(t){return this.bytes_[t]|this.bytes_[t+1]<<8|this.bytes_[t+2]<<16|this.bytes_[t+3]<<24}readUint32(t){return this.readInt32(t)>>>0}readInt64(t){return BigInt.asIntN(64,BigInt(this.readUint32(t))+(BigInt(this.readUint32(t+4))<<BigInt(32)))}readUint64(t){return BigInt.asUintN(64,BigInt(this.readUint32(t))+(BigInt(this.readUint32(t+4))<<BigInt(32)))}readFloat32(t){return Mt[0]=this.readInt32(t),oe[0]}readFloat64(t){return Mt[Bt?0:1]=this.readInt32(t),Mt[Bt?1:0]=this.readInt32(t+4),Ee[0]}writeInt8(t,e){this.bytes_[t]=e}writeUint8(t,e){this.bytes_[t]=e}writeInt16(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8}writeUint16(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8}writeInt32(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8,this.bytes_[t+2]=e>>16,this.bytes_[t+3]=e>>24}writeUint32(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8,this.bytes_[t+2]=e>>16,this.bytes_[t+3]=e>>24}writeInt64(t,e){this.writeInt32(t,Number(BigInt.asIntN(32,e))),this.writeInt32(t+4,Number(BigInt.asIntN(32,e>>BigInt(32))))}writeUint64(t,e){this.writeUint32(t,Number(BigInt.asUintN(32,e))),this.writeUint32(t+4,Number(BigInt.asUintN(32,e>>BigInt(32))))}writeFloat32(t,e){oe[0]=e,this.writeInt32(t,Mt[0])}writeFloat64(t,e){Ee[0]=e,this.writeInt32(t,Mt[Bt?0:1]),this.writeInt32(t+4,Mt[Bt?1:0])}getBufferIdentifier(){if(this.bytes_.length<this.position_+At+ft)throw new Error("FlatBuffers: ByteBuffer is too short to contain an identifier.");let t="";for(let e=0;e<ft;e++)t+=String.fromCharCode(this.readInt8(this.position_+At+e));return t}__offset(t,e){const s=t-this.readInt32(t);return e<this.readInt16(s)?this.readInt16(s+e):0}__union(t,e){return t.bb_pos=e+this.readInt32(e),t.bb=this,t}__string(t,e){t+=this.readInt32(t);const s=this.readInt32(t);t+=At;const i=this.bytes_.subarray(t,t+s);return e===EI.UTF8_BYTES?i:this.text_decoder_.decode(i)}__union_with_string(t,e){return typeof t=="string"?this.__string(e):this.__union(t,e)}__indirect(t){return t+this.readInt32(t)}__vector(t){return t+this.readInt32(t)+At}__vector_len(t){return this.readInt32(t+this.readInt32(t))}__has_identifier(t){if(t.length!=ft)throw new Error("FlatBuffers: file identifier must be length "+ft);for(let e=0;e<ft;e++)if(t.charCodeAt(e)!=this.readInt8(this.position()+At+e))return!1;return!0}createScalarList(t,e){const s=[];for(let i=0;i<e;++i){const I=t(i);I!==null&&s.push(I)}return s}createObjList(t,e){const s=[];for(let i=0;i<e;++i){const I=t(i);I!==null&&s.push(I.unpack())}return s}}class Ie{constructor(t){this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1,this.string_maps=null,this.text_encoder=new TextEncoder;let e;t?e=t:e=1024,this.bb=zt.allocate(e),this.space=e}clear(){this.bb.clear(),this.space=this.bb.capacity(),this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1,this.string_maps=null}forceDefaults(t){this.force_defaults=t}dataBuffer(){return this.bb}asUint8Array(){return this.bb.bytes().subarray(this.bb.position(),this.bb.position()+this.offset())}prep(t,e){t>this.minalign&&(this.minalign=t);const s=~(this.bb.capacity()-this.space+e)+1&t-1;for(;this.space<s+t+e;){const i=this.bb.capacity();this.bb=Ie.growByteBuffer(this.bb),this.space+=this.bb.capacity()-i}this.pad(s)}pad(t){for(let e=0;e<t;e++)this.bb.writeInt8(--this.space,0)}writeInt8(t){this.bb.writeInt8(this.space-=1,t)}writeInt16(t){this.bb.writeInt16(this.space-=2,t)}writeInt32(t){this.bb.writeInt32(this.space-=4,t)}writeInt64(t){this.bb.writeInt64(this.space-=8,t)}writeFloat32(t){this.bb.writeFloat32(this.space-=4,t)}writeFloat64(t){this.bb.writeFloat64(this.space-=8,t)}addInt8(t){this.prep(1,0),this.writeInt8(t)}addInt16(t){this.prep(2,0),this.writeInt16(t)}addInt32(t){this.prep(4,0),this.writeInt32(t)}addInt64(t){this.prep(8,0),this.writeInt64(t)}addFloat32(t){this.prep(4,0),this.writeFloat32(t)}addFloat64(t){this.prep(8,0),this.writeFloat64(t)}addFieldInt8(t,e,s){(this.force_defaults||e!=s)&&(this.addInt8(e),this.slot(t))}addFieldInt16(t,e,s){(this.force_defaults||e!=s)&&(this.addInt16(e),this.slot(t))}addFieldInt32(t,e,s){(this.force_defaults||e!=s)&&(this.addInt32(e),this.slot(t))}addFieldInt64(t,e,s){(this.force_defaults||e!==s)&&(this.addInt64(e),this.slot(t))}addFieldFloat32(t,e,s){(this.force_defaults||e!=s)&&(this.addFloat32(e),this.slot(t))}addFieldFloat64(t,e,s){(this.force_defaults||e!=s)&&(this.addFloat64(e),this.slot(t))}addFieldOffset(t,e,s){(this.force_defaults||e!=s)&&(this.addOffset(e),this.slot(t))}addFieldStruct(t,e,s){e!=s&&(this.nested(e),this.slot(t))}nested(t){if(t!=this.offset())throw new TypeError("FlatBuffers: struct must be serialized inline.")}notNested(){if(this.isNested)throw new TypeError("FlatBuffers: object serialization must not be nested.")}slot(t){this.vtable!==null&&(this.vtable[t]=this.offset())}offset(){return this.bb.capacity()-this.space}static growByteBuffer(t){const e=t.capacity();if(e&3221225472)throw new Error("FlatBuffers: cannot grow buffer beyond 2 gigabytes.");const s=e<<1,i=zt.allocate(s);return i.setPosition(s-e),i.bytes().set(t.bytes(),s-e),i}addOffset(t){this.prep(At,0),this.writeInt32(this.offset()-t+At)}startObject(t){this.notNested(),this.vtable==null&&(this.vtable=[]),this.vtable_in_use=t;for(let e=0;e<t;e++)this.vtable[e]=0;this.isNested=!0,this.object_start=this.offset()}endObject(){if(this.vtable==null||!this.isNested)throw new Error("FlatBuffers: endObject called without startObject");this.addInt32(0);const t=this.offset();let e=this.vtable_in_use-1;for(;e>=0&&this.vtable[e]==0;e--);const s=e+1;for(;e>=0;e--)this.addInt16(this.vtable[e]!=0?t-this.vtable[e]:0);const i=2;this.addInt16(t-this.object_start);const I=(s+i)*Jt;this.addInt16(I);let E=0;const r=this.space;t:for(e=0;e<this.vtables.length;e++){const o=this.bb.capacity()-this.vtables[e];if(I==this.bb.readInt16(o)){for(let a=Jt;a<I;a+=Jt)if(this.bb.readInt16(r+a)!=this.bb.readInt16(o+a))continue t;E=this.vtables[e];break}}return E?(this.space=this.bb.capacity()-t,this.bb.writeInt32(this.space,E-t)):(this.vtables.push(this.offset()),this.bb.writeInt32(this.bb.capacity()-t,this.offset()-t)),this.isNested=!1,t}finish(t,e,s){const i=s?st:0;if(e){const I=e;if(this.prep(this.minalign,At+ft+i),I.length!=ft)throw new TypeError("FlatBuffers: file identifier must be length "+ft);for(let E=ft-1;E>=0;E--)this.writeInt8(I.charCodeAt(E))}this.prep(this.minalign,At+i),this.addOffset(t),i&&this.addInt32(this.bb.capacity()-this.space),this.bb.setPosition(this.space)}finishSizePrefixed(t,e){this.finish(t,e,!0)}requiredField(t,e){const s=this.bb.capacity()-t,i=s-this.bb.readInt32(s);if(!(e<this.bb.readInt16(i)&&this.bb.readInt16(i+e)!=0))throw new TypeError("FlatBuffers: field "+e+" must be set")}startVector(t,e,s){this.notNested(),this.vector_num_elems=e,this.prep(At,t*e),this.prep(s,t*e)}endVector(){return this.writeInt32(this.vector_num_elems),this.offset()}createSharedString(t){if(!t)return 0;if(this.string_maps||(this.string_maps=new Map),this.string_maps.has(t))return this.string_maps.get(t);const e=this.createString(t);return this.string_maps.set(t,e),e}createString(t){if(t==null)return 0;let e;return t instanceof Uint8Array?e=t:e=this.text_encoder.encode(t),this.addInt8(0),this.startVector(1,e.length,1),this.bb.setPosition(this.space-=e.length),this.bb.bytes().set(e,this.space),this.endVector()}createByteVector(t){return t==null?0:(this.startVector(1,t.length,1),this.bb.setPosition(this.space-=t.length),this.bb.bytes().set(t,this.space),this.endVector())}createObjectOffset(t){return t===null?0:typeof t=="string"?this.createString(t):t.pack(this)}createObjectOffsetList(t){const e=[];for(let s=0;s<t.length;++s){const i=t[s];if(i!==null)e.push(this.createObjectOffset(i));else throw new TypeError("FlatBuffers: Argument for createObjectOffsetList cannot contain null.")}return e}createStructOffsetList(t,e){return e(this,t.length),this.createObjectOffsetList(t.slice().reverse()),this.endVector()}}class dt{constructor(){n(this,"bb",null);n(this,"bb_pos",0)}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsAlignment(t,e){return(e||new dt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsAlignment(t,e){return t.setPosition(t.position()+st),(e||new dt).__init(t.readInt32(t.position())+t.position(),t)}absolute(t){const e=this.bb.__offset(this.bb_pos,4);return e?this.bb.readUint32(this.bb.__vector(this.bb_pos+e)+t*4):0}absoluteLength(){const t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__vector_len(this.bb_pos+t):0}absoluteArray(){const t=this.bb.__offset(this.bb_pos,4);return t?new Uint32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}static startAlignment(t){t.startObject(1)}static addAbsolute(t,e){t.addFieldOffset(0,e,0)}static createAbsoluteVector(t,e){t.startVector(4,e.length,4);for(let s=e.length-1;s>=0;s--)t.addInt32(e[s]);return t.endVector()}static startAbsoluteVector(t,e){t.startVector(4,e,4)}static endAlignment(t){return t.endObject()}static createAlignment(t,e){return dt.startAlignment(t),dt.addAbsolute(t,e),dt.endAlignment(t)}}class St{constructor(){n(this,"bb",null);n(this,"bb_pos",0)}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsAttribute(t,e){return(e||new St).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsAttribute(t,e){return t.setPosition(t.position()+st),(e||new St).__init(t.readInt32(t.position())+t.position(),t)}data(t,e){const s=this.bb.__offset(this.bb_pos,4);return s?this.bb.__string(this.bb.__vector(this.bb_pos+s)+t*4,e):null}dataLength(){const t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__vector_len(this.bb_pos+t):0}static startAttribute(t){t.startObject(1)}static addData(t,e){t.addFieldOffset(0,e,0)}static createDataVector(t,e){t.startVector(4,e.length,4);for(let s=e.length-1;s>=0;s--)t.addOffset(e[s]);return t.endVector()}static startDataVector(t,e){t.startVector(4,e,4)}static endAttribute(t){const e=t.endObject();return t.requiredField(e,4),e}static createAttribute(t,e){return St.startAttribute(t),St.addData(t,e),St.endAttribute(t)}}class Wi{constructor(){n(this,"bb",null);n(this,"bb_pos",0)}__init(t,e){return this.bb_pos=t,this.bb=e,this}aperture(){return this.bb.readFloat32(this.bb_pos)}mutate_aperture(t){return this.bb.writeFloat32(this.bb_pos+0,t),!0}position(t){return(t||new Ot).__init(this.bb_pos+4,this.bb)}radius(){return this.bb.readFloat32(this.bb_pos+16)}mutate_radius(t){return this.bb.writeFloat32(this.bb_pos+16,t),!0}xDirection(t){return(t||new Ot).__init(this.bb_pos+20,this.bb)}yDirection(t){return(t||new Ot).__init(this.bb_pos+32,this.bb)}static sizeOf(){return 44}static createCircleCurve(t,e,s,i,I,E,r,o,a,c,A,F){return t.prep(4,44),t.prep(4,12),t.writeFloat32(F),t.writeFloat32(A),t.writeFloat32(c),t.prep(4,12),t.writeFloat32(a),t.writeFloat32(o),t.writeFloat32(r),t.writeFloat32(E),t.prep(4,12),t.writeFloat32(I),t.writeFloat32(i),t.writeFloat32(s),t.writeFloat32(e),t.offset()}}class zi{constructor(){n(this,"bb",null);n(this,"bb_pos",0)}__init(t,e){return this.bb_pos=t,this.bb=e,this}p1(t){return(t||new Ot).__init(this.bb_pos,this.bb)}p2(t){return(t||new Ot).__init(this.bb_pos+12,this.bb)}static sizeOf(){return 24}static createWire(t,e,s,i,I,E,r){return t.prep(4,24),t.prep(4,12),t.writeFloat32(r),t.writeFloat32(E),t.writeFloat32(I),t.prep(4,12),t.writeFloat32(i),t.writeFloat32(s),t.writeFloat32(e),t.offset()}}class ut{constructor(){n(this,"bb",null);n(this,"bb_pos",0)}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsWireSet(t,e){return(e||new ut).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsWireSet(t,e){return t.setPosition(t.position()+st),(e||new ut).__init(t.readInt32(t.position())+t.position(),t)}ps(t,e){const s=this.bb.__offset(this.bb_pos,4);return s?(e||new Ot).__init(this.bb.__vector(this.bb_pos+s)+t*12,this.bb):null}psLength(){const t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__vector_len(this.bb_pos+t):0}static startWireSet(t){t.startObject(1)}static addPs(t,e){t.addFieldOffset(0,e,0)}static startPsVector(t,e){t.startVector(12,e,4)}static endWireSet(t){return t.endObject()}static createWireSet(t,e){return ut.startWireSet(t),ut.addPs(t,e),ut.endWireSet(t)}}class H{constructor(){n(this,"bb",null);n(this,"bb_pos",0)}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsAxis(t,e){return(e||new H).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsAxis(t,e){return t.setPosition(t.position()+st),(e||new H).__init(t.readInt32(t.position())+t.position(),t)}wires(t,e){const s=this.bb.__offset(this.bb_pos,4);return s?(e||new zi).__init(this.bb.__vector(this.bb_pos+s)+t*24,this.bb):null}wiresLength(){const t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__vector_len(this.bb_pos+t):0}order(t){const e=this.bb.__offset(this.bb_pos,6);return e?this.bb.readUint32(this.bb.__vector(this.bb_pos+e)+t*4):0}orderLength(){const t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}orderArray(){const t=this.bb.__offset(this.bb_pos,6);return t?new Uint32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}parts(t){const e=this.bb.__offset(this.bb_pos,8);return e?this.bb.readInt8(this.bb.__vector(this.bb_pos+e)+t):0}partsLength(){const t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}partsArray(){const t=this.bb.__offset(this.bb_pos,8);return t?new Int8Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}wireSets(t,e){const s=this.bb.__offset(this.bb_pos,10);return s?(e||new ut).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+s)+t*4),this.bb):null}wireSetsLength(){const t=this.bb.__offset(this.bb_pos,10);return t?this.bb.__vector_len(this.bb_pos+t):0}circleCurves(t,e){const s=this.bb.__offset(this.bb_pos,12);return s?(e||new Wi).__init(this.bb.__vector(this.bb_pos+s)+t*44,this.bb):null}circleCurvesLength(){const t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}static startAxis(t){t.startObject(5)}static addWires(t,e){t.addFieldOffset(0,e,0)}static startWiresVector(t,e){t.startVector(24,e,4)}static addOrder(t,e){t.addFieldOffset(1,e,0)}static createOrderVector(t,e){t.startVector(4,e.length,4);for(let s=e.length-1;s>=0;s--)t.addInt32(e[s]);return t.endVector()}static startOrderVector(t,e){t.startVector(4,e,4)}static addParts(t,e){t.addFieldOffset(2,e,0)}static createPartsVector(t,e){t.startVector(1,e.length,1);for(let s=e.length-1;s>=0;s--)t.addInt8(e[s]);return t.endVector()}static startPartsVector(t,e){t.startVector(1,e,1)}static addWireSets(t,e){t.addFieldOffset(3,e,0)}static createWireSetsVector(t,e){t.startVector(4,e.length,4);for(let s=e.length-1;s>=0;s--)t.addOffset(e[s]);return t.endVector()}static startWireSetsVector(t,e){t.startVector(4,e,4)}static addCircleCurves(t,e){t.addFieldOffset(4,e,0)}static startCircleCurvesVector(t,e){t.startVector(44,e,4)}static endAxis(t){const e=t.endObject();return t.requiredField(e,4),t.requiredField(e,6),t.requiredField(e,8),t.requiredField(e,10),t.requiredField(e,12),e}static createAxis(t,e,s,i,I,E){return H.startAxis(t),H.addWires(t,e),H.addOrder(t,s),H.addParts(t,i),H.addWireSets(t,I),H.addCircleCurves(t,E),H.endAxis(t)}}var te=(R=>(R[R.NONE=0]="NONE",R[R.WIRE=1]="WIRE",R[R.WIRE_SET=2]="WIRE_SET",R[R.CIRCLE_CURVE=3]="CIRCLE_CURVE",R))(te||{});class it{constructor(){n(this,"bb",null);n(this,"bb_pos",0)}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsCircleExtrusion(t,e){return(e||new it).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsCircleExtrusion(t,e){return t.setPosition(t.position()+st),(e||new it).__init(t.readInt32(t.position())+t.position(),t)}radius(t){const e=this.bb.__offset(this.bb_pos,4);return e?this.bb.readFloat64(this.bb.__vector(this.bb_pos+e)+t*8):0}radiusLength(){const t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__vector_len(this.bb_pos+t):0}radiusArray(){const t=this.bb.__offset(this.bb_pos,4);return t?new Float64Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}axes(t,e){const s=this.bb.__offset(this.bb_pos,6);return s?(e||new H).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+s)+t*4),this.bb):null}axesLength(){const t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}static startCircleExtrusion(t){t.startObject(2)}static addRadius(t,e){t.addFieldOffset(0,e,0)}static createRadiusVector(t,e){t.startVector(8,e.length,8);for(let s=e.length-1;s>=0;s--)t.addFloat64(e[s]);return t.endVector()}static startRadiusVector(t,e){t.startVector(8,e,8)}static addAxes(t,e){t.addFieldOffset(1,e,0)}static createAxesVector(t,e){t.startVector(4,e.length,4);for(let s=e.length-1;s>=0;s--)t.addOffset(e[s]);return t.endVector()}static startAxesVector(t,e){t.startVector(4,e,4)}static endCircleExtrusion(t){const e=t.endObject();return t.requiredField(e,4),t.requiredField(e,6),e}static createCircleExtrusion(t,e,s){return it.startCircleExtrusion(t),it.addRadius(t,e),it.addAxes(t,s),it.endCircleExtrusion(t)}}class Ft{constructor(){n(this,"bb",null);n(this,"bb_pos",0)}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsGeometryLines(t,e){return(e||new Ft).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsGeometryLines(t,e){return t.setPosition(t.position()+st),(e||new Ft).__init(t.readInt32(t.position())+t.position(),t)}points(t,e){const s=this.bb.__offset(this.bb_pos,4);return s?(e||new Ot).__init(this.bb.__vector(this.bb_pos+s)+t*12,this.bb):null}pointsLength(){const t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__vector_len(this.bb_pos+t):0}static startGeometryLines(t){t.startObject(1)}static addPoints(t,e){t.addFieldOffset(0,e,0)}static startPointsVector(t,e){t.startVector(12,e,4)}static endGeometryLines(t){const e=t.endObject();return t.requiredField(e,4),e}static createGeometryLines(t,e){return Ft.startGeometryLines(t),Ft.addPoints(t,e),Ft.endGeometryLines(t)}}class Xi{constructor(){n(this,"bb",null);n(this,"bb_pos",0)}__init(t,e){return this.bb_pos=t,this.bb=e,this}geometryClass(){return this.bb.readInt8(this.bb_pos)}mutate_geometry_class(t){return this.bb.writeInt8(this.bb_pos+0,t),!0}id(){return this.bb.readUint32(this.bb_pos+4)}mutate_id(t){return this.bb.writeUint32(this.bb_pos+4,t),!0}transform(){return this.bb.readUint32(this.bb_pos+8)}mutate_transform(t){return this.bb.writeUint32(this.bb_pos+8,t),!0}static sizeOf(){return 12}static createGeometrySample(t,e,s,i){return t.prep(4,12),t.writeInt32(i),t.writeInt32(s),t.pad(3),t.writeInt8(e),t.offset()}}class K{constructor(){n(this,"bb",null);n(this,"bb_pos",0)}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsGeometries(t,e){return(e||new K).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsGeometries(t,e){return t.setPosition(t.position()+st),(e||new K).__init(t.readInt32(t.position())+t.position(),t)}samples(t,e){const s=this.bb.__offset(this.bb_pos,4);return s?(e||new Xi).__init(this.bb.__vector(this.bb_pos+s)+t*12,this.bb):null}samplesLength(){const t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__vector_len(this.bb_pos+t):0}transforms(t,e){const s=this.bb.__offset(this.bb_pos,6);return s?(e||new Ut).__init(this.bb.__vector(this.bb_pos+s)+t*48,this.bb):null}transformsLength(){const t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}lines(t,e){const s=this.bb.__offset(this.bb_pos,8);return s?(e||new Ft).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+s)+t*4),this.bb):null}linesLength(){const t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}static startGeometries(t){t.startObject(3)}static addSamples(t,e){t.addFieldOffset(0,e,0)}static startSamplesVector(t,e){t.startVector(12,e,4)}static addTransforms(t,e){t.addFieldOffset(1,e,0)}static startTransformsVector(t,e){t.startVector(48,e,8)}static addLines(t,e){t.addFieldOffset(2,e,0)}static createLinesVector(t,e){t.startVector(4,e.length,4);for(let s=e.length-1;s>=0;s--)t.addOffset(e[s]);return t.endVector()}static startLinesVector(t,e){t.startVector(4,e,4)}static endGeometries(t){const e=t.endObject();return t.requiredField(e,4),t.requiredField(e,6),t.requiredField(e,8),e}static createGeometries(t,e,s,i){return K.startGeometries(t),K.addSamples(t,e),K.addTransforms(t,s),K.addLines(t,i),K.endGeometries(t)}}class ji{constructor(){n(this,"bb",null);n(this,"bb_pos",0)}__init(t,e){return this.bb_pos=t,this.bb=e,this}r(){return this.bb.readUint8(this.bb_pos)}mutate_r(t){return this.bb.writeUint8(this.bb_pos+0,t),!0}g(){return this.bb.readUint8(this.bb_pos+1)}mutate_g(t){return this.bb.writeUint8(this.bb_pos+1,t),!0}b(){return this.bb.readUint8(this.bb_pos+2)}mutate_b(t){return this.bb.writeUint8(this.bb_pos+2,t),!0}a(){return this.bb.readUint8(this.bb_pos+3)}mutate_a(t){return this.bb.writeUint8(this.bb_pos+3,t),!0}renderedFaces(){return this.bb.readInt8(this.bb_pos+4)}mutate_rendered_faces(t){return this.bb.writeInt8(this.bb_pos+4,t),!0}stroke(){return this.bb.readInt8(this.bb_pos+5)}mutate_stroke(t){return this.bb.writeInt8(this.bb_pos+5,t),!0}static sizeOf(){return 6}static createMaterial(t,e,s,i,I,E,r){return t.prep(1,6),t.writeInt8(r),t.writeInt8(E),t.writeInt8(I),t.writeInt8(i),t.writeInt8(s),t.writeInt8(e),t.offset()}}class $i{constructor(){n(this,"bb",null);n(this,"bb_pos",0)}__init(t,e){return this.bb_pos=t,this.bb=e,this}id(){return this.bb.readUint32(this.bb_pos)}mutate_id(t){return this.bb.writeUint32(this.bb_pos+0,t),!0}bbox(t){return(t||new rI).__init(this.bb_pos+4,this.bb)}representationClass(){return this.bb.readInt8(this.bb_pos+28)}mutate_representation_class(t){return this.bb.writeInt8(this.bb_pos+28,t),!0}static sizeOf(){return 32}static createRepresentation(t,e,s,i,I,E,r,o,a){return t.prep(4,32),t.pad(3),t.writeInt8(a),t.prep(4,24),t.prep(4,12),t.writeFloat32(o),t.writeFloat32(r),t.writeFloat32(E),t.prep(4,12),t.writeFloat32(I),t.writeFloat32(i),t.writeFloat32(s),t.writeInt32(e),t.offset()}}class qi{constructor(){n(this,"bb",null);n(this,"bb_pos",0)}__init(t,e){return this.bb_pos=t,this.bb=e,this}item(){return this.bb.readUint32(this.bb_pos)}mutate_item(t){return this.bb.writeUint32(this.bb_pos+0,t),!0}material(){return this.bb.readUint32(this.bb_pos+4)}mutate_material(t){return this.bb.writeUint32(this.bb_pos+4,t),!0}representation(){return this.bb.readUint32(this.bb_pos+8)}mutate_representation(t){return this.bb.writeUint32(this.bb_pos+8,t),!0}localTransform(){return this.bb.readUint32(this.bb_pos+12)}mutate_local_transform(t){return this.bb.writeUint32(this.bb_pos+12,t),!0}static sizeOf(){return 16}static createSample(t,e,s,i,I){return t.prep(4,16),t.writeInt32(I),t.writeInt32(i),t.writeInt32(s),t.writeInt32(e),t.offset()}}class ht{constructor(){n(this,"bb",null);n(this,"bb_pos",0)}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsShellHole(t,e){return(e||new ht).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsShellHole(t,e){return t.setPosition(t.position()+st),(e||new ht).__init(t.readInt32(t.position())+t.position(),t)}indices(t){const e=this.bb.__offset(this.bb_pos,4);return e?this.bb.readUint16(this.bb.__vector(this.bb_pos+e)+t*2):0}indicesLength(){const t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__vector_len(this.bb_pos+t):0}indicesArray(){const t=this.bb.__offset(this.bb_pos,4);return t?new Uint16Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}profileId(){const t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readUint16(this.bb_pos+t):0}mutate_profile_id(t){const e=this.bb.__offset(this.bb_pos,6);return e===0?!1:(this.bb.writeUint16(this.bb_pos+e,t),!0)}static startShellHole(t){t.startObject(2)}static addIndices(t,e){t.addFieldOffset(0,e,0)}static createIndicesVector(t,e){t.startVector(2,e.length,2);for(let s=e.length-1;s>=0;s--)t.addInt16(e[s]);return t.endVector()}static startIndicesVector(t,e){t.startVector(2,e,2)}static addProfileId(t,e){t.addFieldInt16(1,e,0)}static endShellHole(t){const e=t.endObject();return t.requiredField(e,4),e}static createShellHole(t,e,s){return ht.startShellHole(t),ht.addIndices(t,e),ht.addProfileId(t,s),ht.endShellHole(t)}}class Lt{constructor(){n(this,"bb",null);n(this,"bb_pos",0)}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsShellProfile(t,e){return(e||new Lt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsShellProfile(t,e){return t.setPosition(t.position()+st),(e||new Lt).__init(t.readInt32(t.position())+t.position(),t)}indices(t){const e=this.bb.__offset(this.bb_pos,4);return e?this.bb.readUint16(this.bb.__vector(this.bb_pos+e)+t*2):0}indicesLength(){const t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__vector_len(this.bb_pos+t):0}indicesArray(){const t=this.bb.__offset(this.bb_pos,4);return t?new Uint16Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}static startShellProfile(t){t.startObject(1)}static addIndices(t,e){t.addFieldOffset(0,e,0)}static createIndicesVector(t,e){t.startVector(2,e.length,2);for(let s=e.length-1;s>=0;s--)t.addInt16(e[s]);return t.endVector()}static startIndicesVector(t,e){t.startVector(2,e,2)}static endShellProfile(t){const e=t.endObject();return t.requiredField(e,4),e}static createShellProfile(t,e){return Lt.startShellProfile(t),Lt.addIndices(t,e),Lt.endShellProfile(t)}}class It{constructor(){n(this,"bb",null);n(this,"bb_pos",0)}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsShell(t,e){return(e||new It).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsShell(t,e){return t.setPosition(t.position()+st),(e||new It).__init(t.readInt32(t.position())+t.position(),t)}profiles(t,e){const s=this.bb.__offset(this.bb_pos,4);return s?(e||new Lt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+s)+t*4),this.bb):null}profilesLength(){const t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__vector_len(this.bb_pos+t):0}holes(t,e){const s=this.bb.__offset(this.bb_pos,6);return s?(e||new ht).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+s)+t*4),this.bb):null}holesLength(){const t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}points(t,e){const s=this.bb.__offset(this.bb_pos,8);return s?(e||new Ot).__init(this.bb.__vector(this.bb_pos+s)+t*12,this.bb):null}pointsLength(){const t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}static startShell(t){t.startObject(3)}static addProfiles(t,e){t.addFieldOffset(0,e,0)}static createProfilesVector(t,e){t.startVector(4,e.length,4);for(let s=e.length-1;s>=0;s--)t.addOffset(e[s]);return t.endVector()}static startProfilesVector(t,e){t.startVector(4,e,4)}static addHoles(t,e){t.addFieldOffset(1,e,0)}static createHolesVector(t,e){t.startVector(4,e.length,4);for(let s=e.length-1;s>=0;s--)t.addOffset(e[s]);return t.endVector()}static startHolesVector(t,e){t.startVector(4,e,4)}static addPoints(t,e){t.addFieldOffset(2,e,0)}static startPointsVector(t,e){t.startVector(12,e,4)}static endShell(t){const e=t.endObject();return t.requiredField(e,4),t.requiredField(e,6),t.requiredField(e,8),e}static createShell(t,e,s,i){return It.startShell(t),It.addProfiles(t,e),It.addHoles(t,s),It.addPoints(t,i),It.endShell(t)}}class p{constructor(){n(this,"bb",null);n(this,"bb_pos",0)}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsMeshes(t,e){return(e||new p).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsMeshes(t,e){return t.setPosition(t.position()+st),(e||new p).__init(t.readInt32(t.position())+t.position(),t)}coordinates(t){const e=this.bb.__offset(this.bb_pos,4);return e?(t||new Ut).__init(this.bb_pos+e,this.bb):null}meshesItems(t){const e=this.bb.__offset(this.bb_pos,6);return e?this.bb.readUint32(this.bb.__vector(this.bb_pos+e)+t*4):0}meshesItemsLength(){const t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}meshesItemsArray(){const t=this.bb.__offset(this.bb_pos,6);return t?new Uint32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}samples(t,e){const s=this.bb.__offset(this.bb_pos,8);return s?(e||new qi).__init(this.bb.__vector(this.bb_pos+s)+t*16,this.bb):null}samplesLength(){const t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}representations(t,e){const s=this.bb.__offset(this.bb_pos,10);return s?(e||new $i).__init(this.bb.__vector(this.bb_pos+s)+t*32,this.bb):null}representationsLength(){const t=this.bb.__offset(this.bb_pos,10);return t?this.bb.__vector_len(this.bb_pos+t):0}materials(t,e){const s=this.bb.__offset(this.bb_pos,12);return s?(e||new ji).__init(this.bb.__vector(this.bb_pos+s)+t*6,this.bb):null}materialsLength(){const t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}circleExtrusions(t,e){const s=this.bb.__offset(this.bb_pos,14);return s?(e||new it).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+s)+t*4),this.bb):null}circleExtrusionsLength(){const t=this.bb.__offset(this.bb_pos,14);return t?this.bb.__vector_len(this.bb_pos+t):0}shells(t,e){const s=this.bb.__offset(this.bb_pos,16);return s?(e||new It).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+s)+t*4),this.bb):null}shellsLength(){const t=this.bb.__offset(this.bb_pos,16);return t?this.bb.__vector_len(this.bb_pos+t):0}localTransforms(t,e){const s=this.bb.__offset(this.bb_pos,18);return s?(e||new Ut).__init(this.bb.__vector(this.bb_pos+s)+t*48,this.bb):null}localTransformsLength(){const t=this.bb.__offset(this.bb_pos,18);return t?this.bb.__vector_len(this.bb_pos+t):0}globalTransforms(t,e){const s=this.bb.__offset(this.bb_pos,20);return s?(e||new Ut).__init(this.bb.__vector(this.bb_pos+s)+t*48,this.bb):null}globalTransformsLength(){const t=this.bb.__offset(this.bb_pos,20);return t?this.bb.__vector_len(this.bb_pos+t):0}static startMeshes(t){t.startObject(9)}static addCoordinates(t,e){t.addFieldStruct(0,e,0)}static addMeshesItems(t,e){t.addFieldOffset(1,e,0)}static createMeshesItemsVector(t,e){t.startVector(4,e.length,4);for(let s=e.length-1;s>=0;s--)t.addInt32(e[s]);return t.endVector()}static startMeshesItemsVector(t,e){t.startVector(4,e,4)}static addSamples(t,e){t.addFieldOffset(2,e,0)}static startSamplesVector(t,e){t.startVector(16,e,4)}static addRepresentations(t,e){t.addFieldOffset(3,e,0)}static startRepresentationsVector(t,e){t.startVector(32,e,4)}static addMaterials(t,e){t.addFieldOffset(4,e,0)}static startMaterialsVector(t,e){t.startVector(6,e,1)}static addCircleExtrusions(t,e){t.addFieldOffset(5,e,0)}static createCircleExtrusionsVector(t,e){t.startVector(4,e.length,4);for(let s=e.length-1;s>=0;s--)t.addOffset(e[s]);return t.endVector()}static startCircleExtrusionsVector(t,e){t.startVector(4,e,4)}static addShells(t,e){t.addFieldOffset(6,e,0)}static createShellsVector(t,e){t.startVector(4,e.length,4);for(let s=e.length-1;s>=0;s--)t.addOffset(e[s]);return t.endVector()}static startShellsVector(t,e){t.startVector(4,e,4)}static addLocalTransforms(t,e){t.addFieldOffset(7,e,0)}static startLocalTransformsVector(t,e){t.startVector(48,e,8)}static addGlobalTransforms(t,e){t.addFieldOffset(8,e,0)}static startGlobalTransformsVector(t,e){t.startVector(48,e,8)}static endMeshes(t){const e=t.endObject();return t.requiredField(e,4),t.requiredField(e,6),t.requiredField(e,8),t.requiredField(e,10),t.requiredField(e,12),t.requiredField(e,14),t.requiredField(e,16),t.requiredField(e,18),t.requiredField(e,20),e}static createMeshes(t,e,s,i,I,E,r,o,a,c){return p.startMeshes(t),p.addCoordinates(t,e),p.addMeshesItems(t,s),p.addSamples(t,i),p.addRepresentations(t,I),p.addMaterials(t,E),p.addCircleExtrusions(t,r),p.addShells(t,o),p.addLocalTransforms(t,a),p.addGlobalTransforms(t,c),p.endMeshes(t)}}class _t{constructor(){n(this,"bb",null);n(this,"bb_pos",0)}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsRelation(t,e){return(e||new _t).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsRelation(t,e){return t.setPosition(t.position()+st),(e||new _t).__init(t.readInt32(t.position())+t.position(),t)}data(t,e){const s=this.bb.__offset(this.bb_pos,4);return s?this.bb.__string(this.bb.__vector(this.bb_pos+s)+t*4,e):null}dataLength(){const t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__vector_len(this.bb_pos+t):0}static startRelation(t){t.startObject(1)}static addData(t,e){t.addFieldOffset(0,e,0)}static createDataVector(t,e){t.startVector(4,e.length,4);for(let s=e.length-1;s>=0;s--)t.addOffset(e[s]);return t.endVector()}static startDataVector(t,e){t.startVector(4,e,4)}static endRelation(t){const e=t.endObject();return t.requiredField(e,4),e}static createRelation(t,e){return _t.startRelation(t),_t.addData(t,e),_t.endRelation(t)}}class x{constructor(){n(this,"bb",null);n(this,"bb_pos",0)}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsSpatialStructure(t,e){return(e||new x).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsSpatialStructure(t,e){return t.setPosition(t.position()+st),(e||new x).__init(t.readInt32(t.position())+t.position(),t)}localId(){const t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readUint32(this.bb_pos+t):null}mutate_local_id(t){const e=this.bb.__offset(this.bb_pos,4);return e===0?!1:(this.bb.writeUint32(this.bb_pos+e,t),!0)}category(t){const e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}children(t,e){const s=this.bb.__offset(this.bb_pos,8);return s?(e||new x).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+s)+t*4),this.bb):null}childrenLength(){const t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}static startSpatialStructure(t){t.startObject(3)}static addLocalId(t,e){t.addFieldInt32(0,e,null)}static addCategory(t,e){t.addFieldOffset(1,e,0)}static addChildren(t,e){t.addFieldOffset(2,e,0)}static createChildrenVector(t,e){t.startVector(4,e.length,4);for(let s=e.length-1;s>=0;s--)t.addOffset(e[s]);return t.endVector()}static startChildrenVector(t,e){t.startVector(4,e,4)}static endSpatialStructure(t){return t.endObject()}static createSpatialStructure(t,e,s,i){return x.startSpatialStructure(t),e!==null&&x.addLocalId(t,e),x.addCategory(t,s),x.addChildren(t,i),x.endSpatialStructure(t)}}class y{constructor(){n(this,"bb",null);n(this,"bb_pos",0)}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsModel(t,e){return(e||new y).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsModel(t,e){return t.setPosition(t.position()+st),(e||new y).__init(t.readInt32(t.position())+t.position(),t)}static bufferHasIdentifier(t){return t.__has_identifier("0001")}metadata(t){const e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}guids(t,e){const s=this.bb.__offset(this.bb_pos,6);return s?this.bb.__string(this.bb.__vector(this.bb_pos+s)+t*4,e):null}guidsLength(){const t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}guidsItems(t){const e=this.bb.__offset(this.bb_pos,8);return e?this.bb.readUint32(this.bb.__vector(this.bb_pos+e)+t*4):0}guidsItemsLength(){const t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}guidsItemsArray(){const t=this.bb.__offset(this.bb_pos,8);return t?new Uint32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}maxLocalId(){const t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readUint32(this.bb_pos+t):0}mutate_max_local_id(t){const e=this.bb.__offset(this.bb_pos,10);return e===0?!1:(this.bb.writeUint32(this.bb_pos+e,t),!0)}localIds(t){const e=this.bb.__offset(this.bb_pos,12);return e?this.bb.readUint32(this.bb.__vector(this.bb_pos+e)+t*4):0}localIdsLength(){const t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}localIdsArray(){const t=this.bb.__offset(this.bb_pos,12);return t?new Uint32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}categories(t,e){const s=this.bb.__offset(this.bb_pos,14);return s?this.bb.__string(this.bb.__vector(this.bb_pos+s)+t*4,e):null}categoriesLength(){const t=this.bb.__offset(this.bb_pos,14);return t?this.bb.__vector_len(this.bb_pos+t):0}meshes(t){const e=this.bb.__offset(this.bb_pos,16);return e?(t||new p).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}attributes(t,e){const s=this.bb.__offset(this.bb_pos,18);return s?(e||new St).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+s)+t*4),this.bb):null}attributesLength(){const t=this.bb.__offset(this.bb_pos,18);return t?this.bb.__vector_len(this.bb_pos+t):0}relations(t,e){const s=this.bb.__offset(this.bb_pos,20);return s?(e||new _t).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+s)+t*4),this.bb):null}relationsLength(){const t=this.bb.__offset(this.bb_pos,20);return t?this.bb.__vector_len(this.bb_pos+t):0}relationsItems(t){const e=this.bb.__offset(this.bb_pos,22);return e?this.bb.readInt32(this.bb.__vector(this.bb_pos+e)+t*4):0}relationsItemsLength(){const t=this.bb.__offset(this.bb_pos,22);return t?this.bb.__vector_len(this.bb_pos+t):0}relationsItemsArray(){const t=this.bb.__offset(this.bb_pos,22);return t?new Int32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}guid(t){const e=this.bb.__offset(this.bb_pos,24);return e?this.bb.__string(this.bb_pos+e,t):null}spatialStructure(t){const e=this.bb.__offset(this.bb_pos,26);return e?(t||new x).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}alignments(t,e){const s=this.bb.__offset(this.bb_pos,28);return s?(e||new dt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+s)+t*4),this.bb):null}alignmentsLength(){const t=this.bb.__offset(this.bb_pos,28);return t?this.bb.__vector_len(this.bb_pos+t):0}geometries(t){const e=this.bb.__offset(this.bb_pos,30);return e?(t||new K).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}static startModel(t){t.startObject(14)}static addMetadata(t,e){t.addFieldOffset(0,e,0)}static addGuids(t,e){t.addFieldOffset(1,e,0)}static createGuidsVector(t,e){t.startVector(4,e.length,4);for(let s=e.length-1;s>=0;s--)t.addOffset(e[s]);return t.endVector()}static startGuidsVector(t,e){t.startVector(4,e,4)}static addGuidsItems(t,e){t.addFieldOffset(2,e,0)}static createGuidsItemsVector(t,e){t.startVector(4,e.length,4);for(let s=e.length-1;s>=0;s--)t.addInt32(e[s]);return t.endVector()}static startGuidsItemsVector(t,e){t.startVector(4,e,4)}static addMaxLocalId(t,e){t.addFieldInt32(3,e,0)}static addLocalIds(t,e){t.addFieldOffset(4,e,0)}static createLocalIdsVector(t,e){t.startVector(4,e.length,4);for(let s=e.length-1;s>=0;s--)t.addInt32(e[s]);return t.endVector()}static startLocalIdsVector(t,e){t.startVector(4,e,4)}static addCategories(t,e){t.addFieldOffset(5,e,0)}static createCategoriesVector(t,e){t.startVector(4,e.length,4);for(let s=e.length-1;s>=0;s--)t.addOffset(e[s]);return t.endVector()}static startCategoriesVector(t,e){t.startVector(4,e,4)}static addMeshes(t,e){t.addFieldOffset(6,e,0)}static addAttributes(t,e){t.addFieldOffset(7,e,0)}static createAttributesVector(t,e){t.startVector(4,e.length,4);for(let s=e.length-1;s>=0;s--)t.addOffset(e[s]);return t.endVector()}static startAttributesVector(t,e){t.startVector(4,e,4)}static addRelations(t,e){t.addFieldOffset(8,e,0)}static createRelationsVector(t,e){t.startVector(4,e.length,4);for(let s=e.length-1;s>=0;s--)t.addOffset(e[s]);return t.endVector()}static startRelationsVector(t,e){t.startVector(4,e,4)}static addRelationsItems(t,e){t.addFieldOffset(9,e,0)}static createRelationsItemsVector(t,e){t.startVector(4,e.length,4);for(let s=e.length-1;s>=0;s--)t.addInt32(e[s]);return t.endVector()}static startRelationsItemsVector(t,e){t.startVector(4,e,4)}static addGuid(t,e){t.addFieldOffset(10,e,0)}static addSpatialStructure(t,e){t.addFieldOffset(11,e,0)}static addAlignments(t,e){t.addFieldOffset(12,e,0)}static createAlignmentsVector(t,e){t.startVector(4,e.length,4);for(let s=e.length-1;s>=0;s--)t.addOffset(e[s]);return t.endVector()}static startAlignmentsVector(t,e){t.startVector(4,e,4)}static addGeometries(t,e){t.addFieldOffset(13,e,0)}static endModel(t){const e=t.endObject();return t.requiredField(e,6),t.requiredField(e,8),t.requiredField(e,12),t.requiredField(e,14),t.requiredField(e,16),t.requiredField(e,24),e}static finishModelBuffer(t,e){t.finish(e,"0001")}static finishSizePrefixedModelBuffer(t,e){t.finish(e,"0001",!0)}}var mt=(R=>(R[R.NONE=0]="NONE",R[R.SHELL=1]="SHELL",R[R.CIRCLE_EXTRUSION=2]="CIRCLE_EXTRUSION",R))(mt||{});const qI=new Map([[ne,{forRelating:"DefinesOcurrence",forRelated:"IsDefinedBy"}],[ae,{forRelated:"HasAssociations",forRelating:"AssociatedTo"}],[Ce,{forRelated:"Decomposes",forRelating:"IsDecomposedBy"}],[ce,{forRelated:"ContainedInStructure",forRelating:"ContainsElements"}]]),Ht={base:{entities:new Set([se,yi,Yi,wi]),rels:new Set([Ce,ce])},materials:{entities:new Set([lI,NI,bI,fI,dI,SI,LI,_I,pI]),rels:new Set([ae])},properties:{entities:new Set([nI,aI,CI,cI,TI,RI,FI,hI,AI,OI]),rels:new Set([ne])},elements:{entities:new Set([Te,Re,Fe,he,Ae,Oe,le,Ne,be,fe,de,Se,Le,_e,pe,Pe,ue,Ue,Me,De,me,ge,Ve,Ge,ye,Ye,we,Be,xe,He,ve,We,ze,Xe,je,ee,$e,qe,Ke,ke,Qe,Je,Ze,ts,es,ss,is,Is,os,Es,rs,ns,as,Cs,cs,Ts,Rs,Fs,hs,As,Os,ls,Ns,bs,fs,ds,Ss,Ls,_s,ps,Ps,us,Us,Ms,Ds,ms,gs,Vs,Gs,ys,Ys,ws,Bs,xs,Hs,vs,Ws,zs,Xs,js,$s,qs,Ks,ks,Qs,Js,Zs,ti,ei,si,ii,Ii,oi,Ei,ri,ni,ai,Ci,ci,Ti,Ri,Fi,hi,Ai,Oi,li,Ni,bi,fi,di,Si,Li,_i,pi,Pi,ui,Ui,Mi,Di,mi,gi,Vi,Gi])}};class KI{constructor(t,e){n(this,"_attributesOffsets",[]);n(this,"_relationsMap",{});n(this,"_guids",[]);n(this,"_guidsItems",[]);n(this,"_ifcApi",null);n(this,"wasm",{path:"/node_modules/web-ifc/",absolute:!1});n(this,"classesToInclude",[Ht.base,Ht.materials,Ht.properties,Ht.elements]);n(this,"attributesToIgnore",["CompositionType","OwnerHistory"]);n(this,"expressIDs",[]);n(this,"classes",[]);this._serializer=t,this._builder=e}async getIfcApi(){if(!this._ifcApi){const t=new Zt;t.SetWasmPath(this.wasm.path,this.wasm.absolute),await t.Init(),t.SetLogLevel(Bi.LOG_LEVEL_OFF),this._ifcApi=t}return this._ifcApi}async getSchema(t=0){const s=(await this.getIfcApi()).GetModelSchema(t);if(!s)throw new Error("Fragments: IFC Schema not found");return s.startsWith("IFC2X3")?"IFC2X3":s.startsWith("IFC4")&&s.replace("IFC4","")===""?"IFC4":s.startsWith("IFC4X3")?"IFC4X3":s}async process(t){const e=await this.getIfcApi();if(t.readFromCallback)e.OpenModelFromCallback(t.readCallback,{COORDINATE_TO_ORIGIN:!0});else if(t.bytes)await e.OpenModel(t.bytes,{COORDINATE_TO_ORIGIN:!0});else throw new Error("Fragments: No data provided");const s=e.GetAllTypesOfModel(0).map(d=>d.typeID),i=await this.getSchema();if(!PI[i])throw new Error("Fragments: Model schema not recognized.");const E=t.geometryProcessedLocalIDs;await this.processItems(E);const r=new Set(E),o=this.getEntitiesToProcess(),a=s.filter(d=>o.includes(d));for(const d of a){const _=e.GetLineIDsWithType(0,d);if(_.size()===0)continue;const P=[];for(let L=0;L<_.size();L++){const g=_.get(L);r.has(g)||P.push(g)}await this.processItems(P)}const c=s.filter(d=>this.getRelsToProcess().includes(d));await this.processRelations(c);const{relIndicesVector:A,relsVector:F}=this.getRelationsVector(),{guidsVector:C,guidsItemsVector:N}=this.getGuidsVector(),S=await this.getMetadataOffset(),h=this.getAttributesVector(),b=y.createLocalIdsVector(this._builder,this.expressIDs),u=this.getCategoriesVector(),D=await this.getSpatialStructureOffset();return this.clean(),{relIndicesVector:A,relsVector:F,guidsVector:C,guidsItemsVector:N,metadataOffset:S,attributesVector:h,localIdsVector:b,categoriesVector:u,spatialStrutureOffset:D}}async processItems(t){const e=await this.getIfcApi();for(let s=0;s<t.length;s++){const i=t[s];try{const I=await e.properties.getItemProperties(0,i);if(!I)continue;const E=ie[I.type];this.classes.push(E),this.expressIDs.push(i),this.serializeAttributes(i,I)}catch(I){console.log(`Problem reading properties for ${i}`),console.log(I),await new Promise(E=>{setTimeout(E,100)});continue}}}addRelation(t,e,s){this._relationsMap[t]||(this._relationsMap[t]={}),this._relationsMap[t][e]||(this._relationsMap[t][e]=[]);for(const i of s)this._relationsMap[t][e].push(i)}serializeAttributes(t,e){const s=[];let i=null;for(const[r,o]of Object.entries(e)){if(this.attributesToIgnore.includes(r)||typeof o=="number"||this._serializer.attrsToExclude.has(r)||o===null||o===void 0)continue;if(Array.isArray(o)){const F=o.filter(C=>C.type===5).map(C=>C.value);this.addRelation(t,r,F);continue}const{value:a,type:c}=o;if(c===5){if(typeof a!="number")continue;this.addRelation(t,r,[a])}else{if(r==="GlobalId"&&typeof a=="string"){i=a;continue}const A=[r,a],F="name"in o&&o.name?o.name:o.constructor.name.toUpperCase();A.push(F!=="OBJECT"?F:"UNDEFINED");const C=JSON.stringify(A),N=this._builder.createSharedString(C);s.push(N)}}const I=St.createDataVector(this._builder,s),E=St.createAttribute(this._builder,I);this._attributesOffsets.push(E),i&&(this._guids.push(i),this._guidsItems.push(t))}getAttributesVector(){return y.createAttributesVector(this._builder,this._attributesOffsets)}getGuidsVector(){const t=[];for(const i of this._guids){const I=this._builder.createString(i);t.push(I)}const e=y.createGuidsVector(this._builder,t),s=y.createGuidsItemsVector(this._builder,this._guidsItems);return{guidsVector:e,guidsItemsVector:s}}async processRelations(t){const e=await this.getIfcApi();for(const s of t){const i=qI.get(s);if(!i)continue;const{forRelating:I,forRelated:E}=i,r=e.GetLineIDsWithType(0,s);if(r.size()!==0)for(let o=0;o<r.size();o++){const a=r.get(o),c=await e.properties.getItemProperties(0,a);if(!c)continue;const A=Object.keys(c),F=A.find(h=>h.startsWith("Relating")),C=A.find(h=>h.startsWith("Related"));if(!(F&&C))continue;const N=c[F].value,S=c[C].map(({value:h})=>h);this.addRelation(N,I,S);for(const h of S)this.addRelation(h,E,[N])}}}getRelationsVector(t=!1){const e=[],s=[];for(const[E,r]of Object.entries(this._relationsMap)){if(t&&!this.expressIDs.includes(Number(E)))continue;const o=[];for(const[A,F]of Object.entries(r)){let C=F;if(t&&(C=F.filter(h=>this.expressIDs.includes(h)),C.length===0))continue;const N=JSON.stringify([A,...C]),S=this._builder.createSharedString(N);o.push(S)}if(t&&o.length===0)continue;s.push(Number(E));const a=_t.createDataVector(this._builder,o),c=_t.createRelation(this._builder,a);e.push(c)}const i=y.createRelationsVector(this._builder,e);return{relIndicesVector:y.createRelationsItemsVector(this._builder,s),relsVector:i}}getCategoriesVector(){const t=this.classes.map(s=>this._builder.createSharedString(s));return y.createCategoriesVector(this._builder,t)}async getMetadataOffset(){const s={schema:(await this.getIfcApi()).GetModelSchema(0)};return this._builder.createString(JSON.stringify(s))}getEntityDecomposition(t,e){var E;const s=[];for(const r of e){const o=(E=this._relationsMap[t])==null?void 0:E[r];if(!o)continue;const a={};for(const c of o){const A=this.expressIDs.indexOf(c);if(A===-1)continue;const F=this.classes[A];F&&(a[F]||(a[F]=[]),a[F].push(c))}for(const c in a){const F=a[c].map(h=>this.getEntityDecomposition(h,e)),C=x.createChildrenVector(this._builder,F),N=this._builder.createSharedString(c);x.startSpatialStructure(this._builder),x.addCategory(this._builder,N),x.addChildren(this._builder,C);const S=x.endSpatialStructure(this._builder);s.push(S)}}const i=x.createChildrenVector(this._builder,s);return x.startSpatialStructure(this._builder),x.addLocalId(this._builder,t),x.addChildren(this._builder,i),x.endSpatialStructure(this._builder)}async getSpatialStructureOffset(){const t=await this.getIfcApi(),e=se,i=[...t.GetLineIDsWithType(0,e)].map(o=>this.getEntityDecomposition(o,["IsDecomposedBy","ContainsElements"])),I=this._builder.createSharedString("IFCPROJECT"),E=x.createChildrenVector(this._builder,i);return x.startSpatialStructure(this._builder),x.addCategory(this._builder,I),x.addChildren(this._builder,E),x.endSpatialStructure(this._builder)}clean(){var t;(t=this._ifcApi)==null||t.Dispose(),this._ifcApi=null,this._guids=[],this._guidsItems=[],this._attributesOffsets=[],this._relationsMap={},this.expressIDs=[],this.classes=[]}getEntitiesToProcess(){return this.classesToInclude.map(({entities:t})=>[...t]).flat()}getRelsToProcess(){return this.classesToInclude.map(({rels:t})=>t?[...t]:[]).flat()}}function V(R,t){return Math.round(R*t)/t}class kI{constructor(t,e,s,i){n(this,"x");n(this,"y");n(this,"z");n(this,"hash");n(this,"id");this.x=V(t[e*3],i),this.y=V(t[e*3+1],i),this.z=V(t[e*3+2],i),this.hash=`${this.x}/${this.y}/${this.z}`,this.id=s}}class QI{constructor(t){n(this,"list",new Map);n(this,"tempV1",new X);n(this,"tempV2",new X);n(this,"tempV3",new X);n(this,"precission");this.precission=t}create(t,e){const s=new kI(t,e,this.list.size,this.precission);return this.list.has(s.hash)||this.list.set(s.hash,s),this.list.get(s.hash)}get(){return Array.from(this.list.values()).map(t=>[t.x,t.y,t.z])}isValidTriangle(t,e,s,i){this.tempV1.set(t[e*3],t[e*3+1],t[e*3+2]),this.tempV2.set(t[s*3],t[s*3+1],t[s*3+2]),this.tempV3.set(t[i*3],t[i*3+1],t[i*3+2]);const I=1/this.precission*10,E=this.tempV1.distanceTo(this.tempV2)>I,r=this.tempV1.distanceTo(this.tempV3)>I,o=this.tempV2.distanceTo(this.tempV3)>I;return E&&r&&o}}class Yt{constructor(t,e){n(this,"p1");n(this,"p2");n(this,"hash");this.p1=t,this.p2=e;const s=[this.p1,this.p2];s.sort((i,I)=>i.x-I.x||i.y-I.y||i.z-I.z),this.hash=`${s[0].hash}_${s[1].hash}`}}class JI{constructor(t,e){n(this,"edges",new Map);n(this,"openEdges",new Set);n(this,"id");n(this,"plane");this.id=t,this.plane=e}add(t){if(this.edges.size===0){for(const e of t)this.openEdges.add(e.hash),this.edges.set(e.hash,e);return}for(const e of t)this.openEdges.has(e.hash)?this.openEdges.delete(e.hash):this.openEdges.add(e.hash),this.edges.set(e.hash,e)}match(t,e){if(e.id!==this.plane.id)return!1;for(const s of t)if(this.openEdges.has(s.hash))return!0;return!1}getOpenEdges(){const t=[];for(const e of this.openEdges)t.push(this.edges.get(e));return t}merge(t){for(const[e,s]of t.edges)this.edges.set(e,s);for(const e of t.openEdges)this.openEdges.has(e)?this.openEdges.delete(e):this.openEdges.add(e)}}class ZI{constructor(){n(this,"list",new Map);n(this,"nextFaceID",0)}add(t,e){const s=this.match(t,e);if(s.length===0){const i=this.nextFaceID++,I=new JI(i,e);I.add(t),this.list.set(I.id,I);return}if(s.length===1){this.list.get(s[0]).add(t);return}if(s.length>1){const i=this.list.get(s[0]);i.add(t);for(let I=1;I<s.length;I++){const E=s[I],r=this.list.get(E);i.merge(r),this.list.delete(E)}}}match(t,e){let s=[];for(const i of this.list.values())i.match(t,e)&&s.push(i.id);return s}}class to{constructor(t){n(this,"closed",!1);n(this,"openStartPoint",null);n(this,"openEndPoint",null);n(this,"plane");n(this,"orderedPoints",[]);this.plane=t}getEdges(t=!1){const e=[];if(t)for(let s=this.orderedPoints.length-1;s>0;s--)e.push(new Yt(this.orderedPoints[s],this.orderedPoints[s-1]));else for(let s=0;s<this.orderedPoints.length-1;s++)e.push(new Yt(this.orderedPoints[s],this.orderedPoints[s+1]));return e}getIndices(){return this.orderedPoints.map(t=>t.id)}add(t){if(this.orderedPoints.length===0){this.openStartPoint=t.p1.hash,this.openEndPoint=t.p2.hash,this.orderedPoints.push(t.p1,t.p2);return}const e=this.match(t);if(e===0)throw new Error("Fragments: Edge doesn't match with any open point");if(e>2)throw new Error("Fragments: Edge matches with more than 2 open points");if(e===2){this.closed=!0,this.openEndPoint=null,this.openStartPoint=null;return}this.openStartPoint===t.p1.hash?(this.orderedPoints.unshift(t.p2),this.openStartPoint=t.p2.hash):this.openEndPoint===t.p1.hash?(this.orderedPoints.push(t.p2),this.openEndPoint=t.p2.hash):this.openStartPoint===t.p2.hash?(this.orderedPoints.unshift(t.p1),this.openStartPoint=t.p1.hash):this.openEndPoint===t.p2.hash&&(this.orderedPoints.push(t.p1),this.openEndPoint=t.p1.hash)}match(t){if(this.closed)return 0;let e=0;return this.openStartPoint===t.p1.hash&&e++,this.openStartPoint===t.p2.hash&&e++,this.openEndPoint===t.p1.hash&&e++,this.openEndPoint===t.p2.hash&&e++,e}merge(t){if(t.closed||this.closed)throw new Error("Fragments: Cannot merge closed profiles");if(t.openStartPoint===this.openEndPoint&&t.openEndPoint===this.openStartPoint)throw new Error("Fragments: Cannot merge profiles that close each other");if(t.openEndPoint===this.openEndPoint&&t.openStartPoint===this.openStartPoint)throw new Error("Fragments: Cannot merge profiles that close each other");let e=!1;(t.openEndPoint===this.openStartPoint||t.openEndPoint===this.openEndPoint)&&(e=!0);const s=t.getEdges(e);for(const i of s)this.add(i)}getArea(){const t=this.orderedPoints.map(a=>[a.x,a.y,a.z]);let e=0,s=1;const i=Math.abs(this.plane.normal.x),I=Math.abs(this.plane.normal.y),E=Math.abs(this.plane.normal.z);i>=I&&i>=E?(e=1,s=2):I>=i&&I>=E?(e=0,s=2):(e=0,s=1);const r=[];for(const a of t)r.push(new uI(a[e],a[s]));let o=0;for(let a=0,c=r.length;a<c;a++){const A=r[a].x,F=r[a===r.length-1?0:a+1].y,C=r[a===r.length-1?0:a+1].x,N=r[a].y;o+=A*F*.5,o-=C*N*.5}return Math.abs(o)}}class eo{constructor(t){n(this,"list",new Map);n(this,"plane");n(this,"nextProfileID",0);this.plane=t}add(t){const e=this.match(t);if(e.length===0){const s=this.nextProfileID++,i=new to(this.plane);i.add(t),this.list.set(s,i);return}if(e.length===1){this.list.get(e[0]).add(t);return}if(e.length>1){const s=this.list.get(e[0]);s.add(t);const i=this.list.get(e[1]);s.merge(i),this.list.delete(e[1])}}getProfiles(){let t=null,e=0;for(const[I,E]of this.list){const r=E.getArea();r>e&&(e=r,t=I)}if(t===null)return null;const s=this.list.get(t).getIndices(),i=[];for(const[I,E]of this.list)I!==t&&i.push(E.getIndices());return{profile:s,holes:i}}match(t){const e=[];for(const[s,i]of this.list)i.match(t)>0&&e.push(s);return e}}function Ki(R){let t=Number.POSITIVE_INFINITY,e=Number.POSITIVE_INFINITY,s=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY,I=Number.NEGATIVE_INFINITY,E=Number.NEGATIVE_INFINITY;for(let r=0;r<R.length;r+=3){const o=R[r],a=R[r+1],c=R[r+2];o<t&&(t=o),a<e&&(e=a),c<s&&(s=c),o>i&&(i=o),a>I&&(I=a),c>E&&(E=c)}return{min:{x:t,y:e,z:s},max:{x:i,y:I,z:E}}}class so{constructor(t,e,s){n(this,"normal");n(this,"constant");n(this,"id");n(this,"faces",[]);const i=V(t.normal.x,s),I=V(t.normal.y,s),E=V(t.normal.z,s),r=V(t.constant,e);this.normal=new X(i,I,E),this.constant=r;const o="||";this.id=`${i}${o}${I}${o}${E}${o}${r}`}}function io(R,t,e){const s=new Map,i=new Map,I=(o,a,c)=>{const A=`${o},${a},${c}`;if(s.has(A))return s.get(A)[0];const F=s.size;return s.set(A,[F,o,a,c]),F};for(let o=0;o<R.length-2;o+=3){const a=R[o],c=R[o+1],A=R[o+2],F=t[a*3],C=t[a*3+1],N=t[a*3+2],S=t[c*3],h=t[c*3+1],b=t[c*3+2],u=t[A*3],D=t[A*3+1],d=t[A*3+2],_=I(F,C,N),P=I(S,h,b),L=I(u,D,d);i.set(i.size,[_,P,L])}const E=[];for(const[,[,o,a,c]]of s)E.push([o,a,c]);return{bbox:e,type:mt.SHELL,profiles:i,holes:new Map,points:E}}function Io(R){const{position:t,normals:e,index:s,raw:i}=R,I=1e6,E=1e7,r=1e3,o=Ki(t);if(i)return io(s,t,o);const a=new UI,c=new X,A=new X,F=new Map;for(let D=0;D<s.length-2;D+=3){const d=s[D];c.set(e[d*3],e[d*3+1],e[d*3+2]),A.set(t[d*3],t[d*3+1],t[d*3+2]),a.setFromNormalAndCoplanarPoint(c,A);const _=new so(a,r,E);F.has(_.id)||F.set(_.id,_),F.get(_.id).faces.push(D)}const C=new QI(I),N=new ZI;for(const[,D]of F)for(const d of D.faces){const _=s[d],P=s[d+1],L=s[d+2];if(!C.isValidTriangle(t,_,P,L))continue;const g=C.create(t,_),v=C.create(t,P),k=C.create(t,L),at=new Yt(g,v),M=new Yt(v,k),m=new Yt(k,g),j=[at,M,m];N.add(j,D)}const S=new Map,h=new Map;let b=0;for(const[,D]of N.list){const d=new eo(D.plane),_=D.getOpenEdges();for(const L of _)d.add(L);const P=d.getProfiles();S.set(b,(P==null?void 0:P.profile)||[]),h.set(b,(P==null?void 0:P.holes)||[]),b++}return{bbox:o,type:mt.SHELL,profiles:S,holes:h,points:C.get()}}function oo(){return new Set([se,yi,Yi,wi,Te,Re,Fe,he,Ae,Oe,le,Ne,be,fe,de,Se,Le,_e,pe,Pe,ue,Ue,Me,De,me,ge,Ve,Ge,ye,Ye,we,Be,xe,He,ve,We,ze,Xe,je,ee,$e,qe,Ke,ke,Qe,Je,Ze,ts,es,ss,is,Is,os,Es,rs,ns,as,Cs,cs,Ts,Rs,Fs,hs,As,Os,ls,Ns,bs,fs,ds,Ss,Ls,_s,ps,Ps,us,Us,Ms,Ds,ms,gs,Vs,Gs,ys,Ys,ws,Bs,xs,Hs,vs,Ws,zs,Xs,js,$s,qs,Ks,ks,Qs,Js,Zs,ti,ei,si,ii,Ii,oi,Ei,ri,ni,ai,Ci,ci,Ti,Ri,Fi,hi,Ai,Oi,li,Ni,bi,fi,di,Si,Li,_i,pi,Pi,ui,Ui,Mi,Di,mi,gi,Vi,Gi,MI,xi,Hi,DI,mI,gI])}class Eo{read(t){try{const e=t.GetAllAlignments(0),s=[];for(const i of e){const I=i.curve3D[0].points;let E=0;const r={absolute:[]};s.push(r);for(let o=0;o<i.horizontal.length;o++){const a=i.horizontal[o],c=this.getCurveType(a.data[1]),A=[];for(const C of a.points){const{x:N,y:S,z:h}=I[E++];A.push(N,S,h)}const F=new Float32Array(A);r.absolute.push({points:F,type:c})}}return s}catch(e){return console.error(e),[]}}getCurveType(t){if(t.includes("CIRCULARARC"))return xt.ELLIPSE_ARC;if(t.includes("LINE")||t.includes("GRADIENT"))return xt.LINES;if(t.includes("CLOTHOID"))return xt.CLOTHOID;if(t.includes("PARABOLICARC"))return xt.PARABOLA;throw new Error(`Fragments: Unknown curve type: ${t}`)}}class ro{constructor(){n(this,"_ifcAPI",null);n(this,"wasm",{path:"../../../../node_modules/web-ifc/",absolute:!1});n(this,"_tempObject1",new re);n(this,"_tempObject2",new re);n(this,"_tempMatrix1",new Qt);n(this,"_previousGeometries",new Map);n(this,"_previousGeometriesIDs",new Map);n(this,"_previousLocalTransforms",new Map);n(this,"_problematicGeometries",new Set);n(this,"_problematicGeometriesHashes",new Set);n(this,"_coordinatesInitialized",!1);n(this,"_civilReader",new Eo);n(this,"_rawCategories",new Set([Hi,xi]));n(this,"categoriesToLoad",oo());n(this,"scene",null);n(this,"isolatedMeshes",null);n(this,"onElementLoaded",()=>{});n(this,"onGeometryLoaded",()=>{});n(this,"onLocalTransformLoaded",()=>{});n(this,"onMaxIdFound",()=>{});n(this,"onCoordinatesLoaded",()=>{});n(this,"onAlignmentsLoaded",()=>{})}async load(t){var E;this._previousGeometriesIDs.clear(),this._ifcAPI=new Zt,this._ifcAPI.SetWasmPath(this.wasm.path,this.wasm.absolute),await this._ifcAPI.Init();let e=0;if(t.readFromCallback&&t.readCallback)e=this._ifcAPI.OpenModelFromCallback(t.readCallback,{COORDINATE_TO_ORIGIN:!0});else if(t.bytes)e=await this._ifcAPI.OpenModel(t.bytes,{COORDINATE_TO_ORIGIN:!0});else throw new Error("Fragments: No data provided");this._ifcAPI.SetLogLevel(Bi.LOG_LEVEL_OFF);const s=this._ifcAPI.GetMaxExpressID(e);this.onMaxIdFound(s),this.onLocalTransformLoaded({id:0,data:[0,0,0,1,0,0,0,1,0]});const i=r=>{if(this._ifcAPI===null)throw new Error("Fragments: IfcAPI not initialized");if(!this._coordinatesInitialized){const L=this._ifcAPI.GetCoordinationMatrix(e);this._tempMatrix1.fromArray(L);const g=this.decompose(this._tempMatrix1);this.onCoordinatesLoaded(g),this._coordinatesInitialized=!0}const o=this._ifcAPI.GetLine(0,r.expressID),a={id:r.expressID,type:o.type,guid:o.GlobalId.value,geometries:[]},c=r.geometries.size(),F=r.geometries.get(0).flatTransformation,{transformWithoutScale:C}=this.removeScale(F);for(let L=0;L<c;L++)a.type===ee?this.loadCircleExtrusionGeometry(e,a,r,L,C.elements):this.loadShellGeometry(e,a,r,L,C.elements);const{dxx:N,dxy:S,dxz:h,dyx:b,dyy:u,dyz:D,px:d,py:_,pz:P}=this.decompose(C);a.geometries.length>0&&this.onElementLoaded({element:a,position:[d,_,P],xDirection:[N,S,h],yDirection:[b,u,D]})};if((E=this.isolatedMeshes)!=null&&E.size)this._ifcAPI.StreamMeshes(e,Array.from(this.isolatedMeshes),i);else for(const r of this.categoriesToLoad){const o=this._ifcAPI.GetLineIDsWithType(e,r),a=[];for(let c=0;c<o.size();c++)a.push(o.get(c));a.length>0&&(console.log(`${ie[r]}: ${a.length}`),this._ifcAPI.StreamMeshes(e,a,i))}const I=this._civilReader.read(this._ifcAPI);this.onAlignmentsLoaded(I),this._ifcAPI.Dispose(),this._ifcAPI=null,this._ifcAPI=new Zt,this._ifcAPI.SetWasmPath(this.wasm.path,this.wasm.absolute),await this._ifcAPI.Init(),this._previousGeometries.clear(),this._previousGeometriesIDs.clear(),this._previousLocalTransforms.clear(),this._problematicGeometries.clear(),this._problematicGeometriesHashes.clear()}loadCircleExtrusionGeometry(t,e,s,i,I){if(this._ifcAPI===null)throw new Error("Fragments: IfcAPI not initialized");const E=s.geometries.get(i),r=E.flatTransformation,{units:o}=this.removeScale(r),{x:a,y:c,z:A,w:F}=E.color,C={id:E.geometryExpressID,color:[a,c,A,F],localTransformID:null};e.geometries.push(C);const{transformWithoutScale:N}=this.removeScale(E.flatTransformation);if(this._previousGeometriesIDs.has(C.id)){this.getLocalTransform(I,N,C),C.id=this._previousGeometriesIDs.get(C.id);return}this.getLocalTransform(I,N,C);const S=this._ifcAPI.GetGeometry(t,C.id),h=S.GetSweptDiskSolid(),b=[],u=[],D=h.axis.size();for(let M=0;M<D;M++){const m=h.axis.get(M),j=[];for(let W=0;W<m.arcSegments.size();W++)j.push(m.arcSegments.get(W));b.push(j);const Ct=[];for(let W=0;W<m.points.size();W++){const J=m.points.get(W);Ct.push({x:J.x*o,y:J.y*o,z:J.z*o})}u.push(Ct)}const d=[],_=[],P=[],L=[];for(let M=0;M<u.length;M++){const m=u[M],j=b[M],Ct=m.length;for(let W=0;W<Ct-1;W++){let J=-1,ot=-1;for(let Q=0;Q<j.length;Q+=2)if(j[Q]===W){J=W,ot=j[Q+1];break}if(J===-1){const Q=[],Et=m[W],rt=m[W+1],ct=Et.x,Z=Et.y,Tt=Et.z,lt=rt.x,$=rt.y,Y=rt.z;d.push(P.length),Q.push(ct,Z,Tt,lt,$,Y),P.push(Q),_.push(te.WIRE)}else{const Q=[],Et=J,rt=Math.round((J+ot)/2),ct=ot,Z=m[Et],Tt=m[rt],lt=m[ct],$=this.computeCircleCurveProperties(Z,Tt,lt),Y=Z.x-$.center.x,Nt=Z.y-$.center.y,T=Z.z-$.center.z;let O=Math.sqrt(Y*Y+Nt*Nt+T*T);O===0&&(O=1);const f=Y/O,l=Nt/O,U=T/O,w=Tt.x-$.center.x,G=Tt.y-$.center.y,q=Tt.z-$.center.z;let z=Math.sqrt(w*w+G*G+q*q);z===0&&(z=1);const tt=w/z,Rt=G/z,et=q/z;let B=this.crossProduct({x:f,y:l,z:U},{x:tt,y:Rt,z:et});O=Math.sqrt(B.x*B.x+B.y*B.y+B.z*B.z),O===0&&(O=1),B={x:B.x/O,y:B.y/O,z:B.z/O},d.push(L.length),Q.push($.center.x,$.center.y,$.center.z,$.radius,$.angle,f,l,U,B.x,B.y,B.z),L.push(Q),_.push(te.CIRCLE_CURVE),W=ct-1}}}const g=this.getGeometryBuffers(t,E);if(g===null){console.log(`Zero length geometry: ${C.id}`),e.geometries.pop(),this._problematicGeometries.add(C.id);return}const{position:v}=g;for(let M=0;M<v.length;M++)v[M]*=o;const k=Ki(v),at=h.profileRadius*o;this._previousGeometriesIDs.set(C.id,C.id),this.onGeometryLoaded({id:C.id,geometry:{type:mt.CIRCLE_EXTRUSION,units:o,indicesArray:d,typesArray:_,segments:P,circleCurveData:L,radius:at,bbox:k}}),S.delete()}loadShellGeometry(t,e,s,i,I){if(this._ifcAPI===null)throw new Error("Fragments: IfcAPI not initialized");const E=s.geometries.get(i),r=E.flatTransformation,{units:o}=this.removeScale(r);if(this._problematicGeometries.has(E.geometryExpressID)){console.log(` Problematic geometry: ${E.geometryExpressID}`);return}const{x:a,y:c,z:A,w:F}=E.color,C={id:E.geometryExpressID,color:[a,c,A,F],localTransformID:null};e.geometries.push(C);const{transformWithoutScale:N}=this.removeScale(E.flatTransformation);if(this._previousGeometriesIDs.has(C.id)){this.getLocalTransform(I,N,C),C.id=this._previousGeometriesIDs.get(C.id);return}const S=this.getGeometryBuffers(t,E);if(S===null){console.log(`Zero length geometry: ${C.id}`),e.geometries.pop(),this._problematicGeometries.add(C.id);return}const{position:h,normals:b,index:u}=S;for(let Y=0;Y<h.length;Y++)h[Y]*=o;const D=h.length/3,d=u.length/3;let _=0,P=0;const L=new VI,g=new X,v=new X,k=new X,at=this.getVolume(u,h),M=new X;for(let Y=0;Y<u.length-2;Y+=3){const Nt=u[Y],T=u[Y+1],O=u[Y+2];g.set(h[Nt*3],h[Nt*3+1],h[Nt*3+2]),v.set(h[T*3],h[T*3+1],h[T*3+2]),k.set(h[O*3],h[O*3+1],h[O*3+2]),M.add(g),M.add(v),M.add(k),L.set(g,v,k);const f=L.getArea();f>_&&(_=f),P+=f}M.divideScalar(u.length),g.set(h[0],h[1],h[2]),v.set(h[3],h[4],h[5]),k.set(h[6],h[7],h[8]);const m=1e4,j=V(P,m),Ct=V(_,m),W=V(at,m),J=V(g.x,m),ot=V(g.y,m),Q=V(g.z,m),Et=V(M.x,m),rt=V(M.x,m),ct=V(M.x,m),Z=`${D}-${d}-${j}-${Ct}-${W}-${Et}-${rt}-${ct}-${J}-${ot}-${Q}`;if(this._problematicGeometriesHashes.has(Z)){console.log(`Problematic geometry: ${C.id}`),e.geometries.pop(),this._problematicGeometries.add(C.id),this._problematicGeometriesHashes.add(Z);return}const Tt=!this._previousGeometries.has(Z),lt=E.geometryExpressID;if(Tt)this._previousGeometries.set(Z,E.geometryExpressID),this._previousGeometriesIDs.set(lt,lt);else{const Y=this._previousGeometries.get(Z);if(Y===void 0)throw new Error("Fragments: Previous geometry not found");this._previousGeometriesIDs.set(lt,Y),C.id=Y}this.getLocalTransform(I,N,C);const $=this._rawCategories.has(e.type);if(Tt)try{const Y=Io({position:h,normals:b,index:u,raw:$});this.onGeometryLoaded({id:C.id,geometry:Y})}catch{console.error(`Fragments: Problematic geometry: ${C.id}`),e.geometries.pop(),this._problematicGeometries.add(C.id),this._problematicGeometriesHashes.add(Z)}}getLocalTransform(t,e,s){this._tempObject1.position.set(0,0,0),this._tempObject1.rotation.set(0,0,0),this._tempObject1.scale.set(1,1,1),this._tempObject1.updateMatrix(),this._tempMatrix1.fromArray(t),this._tempObject1.applyMatrix4(this._tempMatrix1),this._tempObject2.position.set(0,0,0),this._tempObject2.rotation.set(0,0,0),this._tempObject2.scale.set(1,1,1),this._tempObject2.updateMatrix(),this._tempObject2.applyMatrix4(e),this._tempObject1.attach(this._tempObject2);const{px:i,py:I,pz:E,dxx:r,dxy:o,dxz:a,dyx:c,dyy:A,dyz:F}=this.decompose(this._tempObject2.matrix);if(this._tempObject2.removeFromParent(),!(i===0&&I===0&&E===0&&r===1&&o===0&&a===0&&c===0&&A===1&&F===0)){const N=`${i}-${I}-${E}-${r}-${o}-${a}-${c}-${A}-${F}`,S=this._previousLocalTransforms.get(N);if(S)s.localTransformID=S.id;else{const b={id:this._previousLocalTransforms.size+1,data:[i,I,E,r,o,a,c,A,F]};this._previousLocalTransforms.set(N,b),s.localTransformID=b.id,this.onLocalTransformLoaded(b)}}}removeScale(t){const e=new Qt().fromArray(t),s=new X,i=new GI,I=new X;e.decompose(s,i,I);const E=I.x,r=new Qt;return r.compose(s,i,new X(1,1,1)),{units:E,transformWithoutScale:r}}decompose(t){const i=V(t.elements[0],1e3),I=V(t.elements[1],1e3),E=V(t.elements[2],1e3),r=V(t.elements[4],1e5),o=V(t.elements[5],1e5),a=V(t.elements[6],1e5),c=V(t.elements[8],1e5),A=V(t.elements[9],1e5),F=V(t.elements[10],1e5),C=V(t.elements[12],1e5),N=V(t.elements[13],1e5),S=V(t.elements[14],1e5);return{dxx:i,dxy:I,dxz:E,dyx:r,dyy:o,dyz:a,dzx:c,dzy:A,dzz:F,px:C,py:N,pz:S}}getVolume(t,e){let s=0;const i=new X,I=new X,E=new X;for(let r=0;r<t.length-2;r+=3){const o=t[r]*3,a=t[r+1]*3,c=t[r+2]*3;i.set(e[o],e[o+1],e[o+2]),I.set(e[a],e[a+1],e[a+2]),E.set(e[c],e[c+1],e[c+2]),s+=this.getSignedVolumeOfTriangle(i,I,E)}return Math.abs(s)}getSignedVolumeOfTriangle(t,e,s){const i=s.x*e.y*t.z,I=e.x*s.y*t.z,E=s.x*t.y*e.z,r=t.x*s.y*e.z,o=e.x*t.y*s.z,a=t.x*e.y*s.z;return 1/6*(-i+I+E-r-o+a)}getGeometryBuffers(t,e){if(!this._ifcAPI)throw new Error("Fragments: IfcAPI not initialized");const s=this._ifcAPI.GetGeometry(t,e.geometryExpressID),i=this._ifcAPI.GetIndexArray(s.GetIndexData(),s.GetIndexDataSize()),I=this._ifcAPI.GetVertexArray(s.GetVertexData(),s.GetVertexDataSize());if(i.length===0||I.length===0)return s.delete(),null;const E=new Float32Array(I.length/2),r=new Float32Array(I.length/2);for(let o=0;o<I.length;o+=6)E[o/2]=I[o],E[o/2+1]=I[o+1],E[o/2+2]=I[o+2],r[o/2]=I[o+3],r[o/2+1]=I[o+4],r[o/2+2]=I[o+5];return s.delete(),{position:E,normals:r,index:i}}crossProduct(t,e){return{x:t.y*e.z-t.z*e.y,y:t.z*e.x-t.x*e.z,z:t.x*e.y-t.y*e.x}}computeCircleCurveProperties(t,e,s){function i(b,u,D){const d=u.x-b.x,_=u.y-b.y,P=u.z-b.z,L=D.x-b.x,g=D.y-b.y,v=D.z-b.z,k=.5*(d**2+_**2+P**2),at=.5*(L**2+g**2+v**2),M=d*g-_*L,m=_*v-P*g,j=P*L-d*v,Ct=k*L-at*d,W=k*g-at*_,J=k*v-at*P,ot=M**2+m**2+j**2;if(ot===0)throw new Error("Fragments: Points are collinear, no unique circle exists.");const Q=b.x+(M*W-j*J)/ot,Et=b.y+(m*J-M*Ct)/ot,rt=b.z+(j*Ct-m*W)/ot;return{x:Q,y:Et,z:rt}}function I(b,u){return{x:b.x-u.x,y:b.y-u.y,z:b.z-u.z}}function E(b){return Math.sqrt(b.x*b.x+b.y*b.y+b.z*b.z)}const r=I(e,t),o=I(s,e),a=this.crossProduct(r,o),c=i(t,e,s),A=I(t,c),F=I(s,c),C=E(I(c,t)),N=I(t,c),S=E(N);N.x/=S,N.y/=S,N.z/=S;const h=Math.acos((A.x*F.x+A.y*F.y+A.z*F.z)/(E(A)*E(F)));return{center:c,radius:C,normal:a,initialTangent:N,angle:h*180/Math.PI}}}class no{constructor(){n(this,"wasm",{path:"../../../../node_modules/web-ifc/",absolute:!1})}async process(t){const{builder:e}=t;let s=0;const i=[];let I={dxx:1,dxy:0,dxz:0,dyx:0,dyy:1,dyz:0,px:0,py:0,pz:0};const E=[],r=[],o=[],a=[],c=new Map,A=new Map,F=new Map,C=new ro;C.wasm=this.wasm,C.onGeometryLoaded=T=>{E.push(T)},C.onElementLoaded=T=>{o.push(T)},C.onLocalTransformLoaded=T=>{a.push(T)},C.onCoordinatesLoaded=T=>{I=T},C.onMaxIdFound=T=>{s=T},C.onAlignmentsLoaded=T=>{for(const O of T)r.push(O)},await C.load(t);const N=[];let S=0;p.startGlobalTransformsVector(e,o.length);const h=new Map,b=[];for(let T=0;T<o.length;T++){const O=o[o.length-1-T];N.push(S++);const{position:f,xDirection:l,yDirection:U}=O,[w,G,q]=f,[z,tt,Rt]=l,[et,B,bt]=U;i.push(o[T].element.id);const pt=o.length-1-T,Gt=O.element.type,yt=ie[Gt];h.has(yt)||h.set(yt,h.size),Ut.createTransform(e,w,G,q,z,tt,Rt,et,B,bt),h.get(yt),b.unshift(O.element.id),c.set(O.element.id,pt)}const u=e.endVector(),D=[];for(let T=0;T<E.length;T++){const O=E[T];if(O.geometry.type!==mt.SHELL)continue;const{points:f,profiles:l,holes:U}=O.geometry;It.startPointsVector(e,f.length);for(let et=0;et<f.length;et++){const[B,bt,pt]=f[f.length-1-et];Ot.createFloatVector(e,B,bt,pt)}const w=e.endVector(),G=[];for(const[,et]of l){const B=Lt.createIndicesVector(e,et),bt=Lt.createShellProfile(e,B);G.push(bt)}const q=It.createProfilesVector(e,G),z=[];for(const[et,B]of U)for(const bt of B){const pt=ht.createIndicesVector(e,bt),Gt=ht.createShellHole(e,pt,et);z.push(Gt)}const tt=It.createHolesVector(e,z),Rt=It.createShell(e,q,tt,w);D.push(Rt)}const d=p.createShellsVector(e,D),_=[];for(let T=0;T<E.length;T++){const O=E[T];if(O.geometry.type!==mt.CIRCLE_EXTRUSION)continue;const f=[],{radius:l,indicesArray:U,typesArray:w,segments:G,circleCurveData:q}=O.geometry;H.startCircleCurvesVector(e,q.length);for(let Pt=0;Pt<q.length;Pt++){const[Xt,jt,$t,qt,Kt,kt,Zi,tI,eI,sI,iI]=q[Pt];Wi.createCircleCurve(e,Kt/360*2*Math.PI,Xt,jt,$t,qt,eI,sI,iI,kt,Zi,tI)}const z=e.endVector();H.startWiresVector(e,G.length);for(let Pt=0;Pt<G.length;Pt++){const[Xt,jt,$t,qt,Kt,kt]=G[Pt];zi.createWire(e,Xt,jt,$t,qt,Kt,kt)}const tt=e.endVector(),Rt=H.createOrderVector(e,U),et=H.createPartsVector(e,w);H.startWireSetsVector(e,0);const B=e.endVector();H.startAxis(e),H.addCircleCurves(e,z),H.addOrder(e,Rt),H.addWires(e,tt),H.addWireSets(e,B),H.addParts(e,et);const bt=H.endAxis(e);f.push(bt);const pt=it.createAxesVector(e,f),Gt=it.createRadiusVector(e,[l]);it.startCircleExtrusion(e),it.addAxes(e,pt),it.addRadius(e,Gt);const yt=it.endCircleExtrusion(e);_.push(yt)}const P=p.createCircleExtrusionsVector(e,_);p.startRepresentationsVector(e,E.length);const L=new Map;for(let T=0;T<E.length;T++){const O=E.length-1-T,l=E[O].geometry.type;let U=L.get(l);U===void 0&&(U=-1),L.set(l,U+1)}const g=new X,v=new X;for(let T=0;T<E.length;T++){const O=E.length-1-T,f=E[O],{bbox:l}=f.geometry;A.set(f.id,O);const U=f.geometry.type,w=L.get(U);if(w===void 0)throw new Error("Fragments: Malformed geometry definition");L.set(U,w-1),g.set(l.min.x,l.min.y,l.min.z),v.set(l.max.x,l.max.y,l.max.z),g.distanceTo(v)>999999&&(console.log(`Infinity bounding box: ${f.id}`),l.min.x=0,l.min.y=0,l.min.z=0,l.max.x=.1,l.max.y=.1,l.max.z=.1),$i.createRepresentation(e,w,l.min.x,l.min.y,l.min.z,l.max.x,l.max.y,l.max.z,f.geometry.type)}const k=e.endVector();let at=0;for(const T of o)for(const O of T.element.geometries){const f=O.color.toString();if(!F.has(f)){const l=O.color.map(U=>U*255);F.set(f,{id:at++,color:l})}}p.startMaterialsVector(e,F.size);const M=Array.from(F.keys());for(let T=0;T<M.length;T++){const O=M[M.length-1-T],{color:f}=F.get(O),[l,U,w,G]=f;ji.createMaterial(e,l,U,w,G,$I.ONE,0)}const m=e.endVector();let j=0;for(const T of o)j+=T.element.geometries.length;p.startSamplesVector(e,j);for(let T=0;T<o.length;T++){const O=o[o.length-1-T],f=c.get(O.element.id),l=O.element.geometries;for(let U=0;U<l.length;U++){const w=l[l.length-U-1],G=A.get(w.id),q=F.get(w.color.toString()).id,z=w.localTransformID||0;qi.createSample(e,f,q,G,z)}}const Ct=e.endVector();p.startLocalTransformsVector(e,a.length);for(let T=0;T<a.length;T++){const O=a[a.length-1-T],[f,l,U,w,G,q,z,tt,Rt]=O.data;Ut.createTransform(e,f,l,U,w,G,q,z,tt,Rt)}const W=e.endVector(),J=p.createMeshesItemsVector(e,N),ot=Ut.createTransform(e,I.px,I.py,I.pz,I.dxx,I.dxy,I.dxz,I.dyx,I.dyy,I.dyz);p.startMeshes(e),p.addCoordinates(e,ot),p.addGlobalTransforms(e,u),p.addShells(e,d),p.addRepresentations(e,k),p.addSamples(e,Ct),p.addLocalTransforms(e,W),p.addMaterials(e,m),p.addCircleExtrusions(e,P),p.addMeshesItems(e,J);const Q=p.endMeshes(e),Et=[],rt=new Map;let ct=0;for(let T=0;T<r.length;T++){const O=T,f=r[O],l=[];rt.set(O,l);for(let U=0;U<f.absolute.length;U++){const w=f.absolute[f.absolute.length-1-U],{points:G}=w;Ft.startPointsVector(e,G.length/3);for(let tt=0;tt<G.length-2;tt+=3){const Rt=G[tt],et=G[tt+1],B=G[tt+2];Ot.createFloatVector(e,Rt,et,B)}const q=e.endVector();Ft.startGeometryLines(e),Ft.addPoints(e,q);const z=Ft.endGeometryLines(e);Et.push(z),l.push(ct++)}}const Z=K.createLinesVector(e,Et);K.startSamplesVector(e,ct),ct--;for(let T=0;T<r.length;T++){const O=r.length-1-T,f=r[O];for(let l=0;l<f.absolute.length;l++){const U=f.absolute[f.absolute.length-1-l],{type:w}=U,G=ct--;Xi.createGeometrySample(e,w,G,0)}}const Tt=e.endVector();K.startTransformsVector(e,0);const lt=e.endVector();K.startGeometries(e),K.addSamples(e,Tt),K.addTransforms(e,lt),K.addLines(e,Z);const $=K.endGeometries(e),Y=[];for(let T=0;T<r.length;T++){const O=rt.get(T);if(O===void 0)throw new Error("Fragments: Malformed alignment definition");const f=dt.createAbsoluteVector(e,O),l=dt.createAlignment(e,f);Y.push(l)}const Nt=y.createAlignmentsVector(e,Y);return{modelMesh:Q,localIDs:i,maxLocalID:s,modelGeometries:$,modelAlignments:Nt}}}class ao{constructor(){n(this,"_builder",null);n(this,"wasm",{path:"/node_modules/web-ifc/",absolute:!1});n(this,"attrsToExclude",new Set(["Representation","ObjectPlacement"]))}get builder(){if(!this._builder)throw new Error("Fragments: Builder not initialized");return this._builder}async process(t){this._builder=new Ie(1024);const e=new no;e.wasm=this.wasm;const s={...t,builder:this.builder},i=await e.process(s),{modelMesh:I,maxLocalID:E,localIDs:r,modelGeometries:o,modelAlignments:a}=i,c=new KI(this,this.builder);c.wasm=this.wasm;const A={...t,geometryProcessedLocalIDs:r},F=await c.process(A),{relIndicesVector:C,relsVector:N,guidsVector:S,guidsItemsVector:h,metadataOffset:b,localIdsVector:u,spatialStrutureOffset:D,attributesVector:d,categoriesVector:_}=F,P=yI.generateUUID(),L=this.builder.createString(P);y.startModel(this.builder),y.addMeshes(this.builder,I),y.addMetadata(this.builder,b),y.addAttributes(this.builder,d),y.addLocalIds(this.builder,u),y.addCategories(this.builder,_),y.addRelationsItems(this.builder,C),y.addRelations(this.builder,N),y.addGuidsItems(this.builder,h),y.addGuids(this.builder,S),y.addSpatialStructure(this.builder,D),y.addGuid(this.builder,L),y.addMaxLocalId(this.builder,E),y.addGeometries(this.builder,o),y.addAlignments(this.builder,a);const g=y.endModel(this.builder);this.builder.finish(g);const v=this.builder.asUint8Array();return this.clean(),t.raw?v:YI.deflate(v)}clean(){var t;(t=this._builder)==null||t.clear(),this._builder=null}}const gt=new wI,Co=gt.get(BI),nt=Co.create();nt.scene=new xI(gt);nt.scene.setup();nt.scene.three.background=null;const co=document.getElementById("container");nt.renderer=new HI(gt,co);nt.camera=new vI(gt);nt.camera.controls.setLookAt(74,16,.2,30,-4,27);gt.init();const To=gt.get(WI);To.create(nt);const ki=new ao;ki.wasm={absolute:!0,path:"https://unpkg.com/web-ifc@0.0.68/"};let Dt=null,Qi=()=>{};const Ro=async()=>{const e=await(await fetch("/resources/ifc/school_str.ifc")).arrayBuffer(),s=new Uint8Array(e);Dt=await ki.process({bytes:s}),Qi()},Fo="https://thatopen.github.io/engine_fragment/resources/worker.mjs",wt=new zI(Fo);nt.camera.controls.addEventListener("rest",()=>wt.update(!0));const ho=async()=>{if(!Dt)return;const R=await wt.load(Dt,{modelId:"example"});R.useCamera(nt.camera.three),nt.scene.three.add(R.object),await wt.update(!0)},Ao=async()=>{await wt.disposeModel("example")};XI.init();const[Wt,Ji]=vi.create(R=>{const t=()=>{if(!Dt)return;const s=new File([Dt],"sample.frag"),i=document.createElement("a");i.href=URL.createObjectURL(s),i.download=s.name,i.click(),URL.revokeObjectURL(i.href)};let e=vt`
      <bim-label style="white-space: normal;">💡 Open the console to see more information</bim-label>
      <bim-button label="Load IFC" @click=${Ro}></bim-button>
    `;return Dt&&(e=vt`
        <bim-label style="white-space: normal;">🚀 The IFC has been converted to Fragments binary data. Add the model to the scene!</bim-label>
        <bim-button label="Add Model" @click=${ho}></bim-button>
        <bim-button label="Remove Model" @click=${Ao}></bim-button>
        <bim-button label="Download Fragments" @click=${t}></bim-button>
      `),vt`
    <bim-panel id="controls-panel" active label="IFC Importer" class="options-menu">
      <bim-panel-section label="Controls">
        ${e}
      </bim-panel-section>
    </bim-panel>
  `},{});Qi=()=>Ji();wt.models.list.onItemDeleted.add(()=>Ji());document.body.append(Wt);const Oo=vi.create(()=>vt`
    <bim-button class="phone-menu-toggler" icon="solar:settings-bold"
      @click=${()=>{Wt.classList.contains("options-menu-visible")?Wt.classList.remove("options-menu-visible"):Wt.classList.add("options-menu-visible")}}>
    </bim-button>
  `);document.body.append(Oo);const Vt=new jI;Vt.showPanel(2);document.body.append(Vt.dom);Vt.dom.style.left="0px";Vt.dom.style.zIndex="unset";nt.renderer.onBeforeUpdate.add(()=>Vt.begin());nt.renderer.onAfterUpdate.add(()=>Vt.end());
